// This code was generated by Cursor
using System.Text;
using System.Text.Json;
using CreditTransfer.Services.WebHandler.Models;
using System.Diagnostics;

namespace CreditTransfer.Services.WebHandler.Services
{
    /// <summary>
    /// HTTP client for calling Credit Transfer REST API
    /// </summary>
    public class CreditTransferApiClient : ICreditTransferApiClient
    {
        private readonly HttpClient _httpClient;
        private readonly IKeycloakAuthenticationService _authService;
        private readonly ILogger<CreditTransferApiClient> _logger;
        private readonly ActivitySource _activitySource;
        private readonly IConfiguration _configuration;

        public CreditTransferApiClient(
            HttpClient httpClient,
            IKeycloakAuthenticationService authService,
            ILogger<CreditTransferApiClient> logger,
            ActivitySource activitySource,
            IConfiguration configuration)
        {
            _httpClient = httpClient;
            _authService = authService;
            _logger = logger;
            _activitySource = activitySource;
            _configuration = configuration;
        }

        public async Task<CreditTransferApiResponse> TransferCreditAsync(CreditTransferRequest request)
        {
            using var activity = _activitySource.StartActivity("CreditTransferApiClient.TransferCredit");
            
            // Validate request
            if (string.IsNullOrEmpty(request.SourceMsisdn))
                throw new ArgumentException("SourceMsisdn is required", nameof(request));
            if (string.IsNullOrEmpty(request.DestinationMsisdn))
                throw new ArgumentException("DestinationMsisdn is required", nameof(request));
            if (request.Amount <= 0)
                throw new ArgumentException("Amount must be greater than zero", nameof(request));
            if (string.IsNullOrEmpty(request.Pin))
                throw new ArgumentException("Pin is required", nameof(request));

            // Retry mechanism for API calls
            const int maxRetries = 2; // 1 initial + 2 retries = 3 total attempts
            const int baseDelayMs = 500;
            
            for (int attempt = 1; attempt <= maxRetries + 1; attempt++)
            {
                try
                {
                    activity?.SetTag("credit.transfer.source", request.SourceMsisdn);
                    activity?.SetTag("credit.transfer.destination", request.DestinationMsisdn);
                    activity?.SetTag("credit.transfer.amount", request.Amount);
                    activity?.SetTag("retry.attempt", attempt);

                    _logger.LogInformation("Making API call for credit transfer (attempt {Attempt}) - Source: {Source}, Destination: {Destination}, Amount: {Amount}",
                        attempt, request.SourceMsisdn, request.DestinationMsisdn, request.Amount);

                // Get JWT token
                var token = await _authService.GetAccessTokenAsync();
                
                // Prepare API request with correct property names (PascalCase as expected by API)
                var endpoint = _configuration["CreditTransferApi:BaseUrl"] + _configuration["CreditTransferApi:TransferEndpoint"] ?? "/api/credittransfer/transfer";
                
                var apiRequest = new
                {
                    SourceMsisdn = request.SourceMsisdn,
                    DestinationMsisdn = request.DestinationMsisdn,
                    Amount = request.Amount,
                    AmountRiyal = (int)request.AmountRiyal,
                    amountBaisa = request.AmountBaisa,
                    Pin = request.Pin
                };

                // Serialize with consistent options
                var jsonOptions = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    WriteIndented = false
                };
                var jsonContent = JsonSerializer.Serialize(apiRequest, jsonOptions);
                var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                // Add authorization header
                _httpClient.DefaultRequestHeaders.Clear();
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

                activity?.SetTag("http.method", "POST");
                activity?.SetTag("http.url", $"{_httpClient.BaseAddress}{endpoint}");

                _logger.LogDebug("Sending request to {Endpoint} with payload: {Payload}", endpoint, jsonContent);

                // Make API call
                var response = await _httpClient.PostAsync(endpoint, content);
                
                activity?.SetTag("http.status_code", (int)response.StatusCode);

                var responseContent = await response.Content.ReadAsStringAsync();
                _logger.LogDebug("Received response: {Status} - {Content}", response.StatusCode, responseContent);

                if (response.IsSuccessStatusCode)
                {
                    // Parse successful response with consistent JSON options
                    try
                    {
                        var deserializeOptions = new JsonSerializerOptions
                        {
                            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                            PropertyNameCaseInsensitive = true
                        };
                        
                        var apiResponse = JsonSerializer.Deserialize<CreditTransferApiResponse>(responseContent, deserializeOptions);
                        if (apiResponse != null)
                        {
                            activity?.SetTag("api.success", apiResponse.Success);
                            activity?.SetTag("api.status_code", apiResponse.StatusCode);
                            activity?.SetTag("api.transaction_id", apiResponse.TransactionId);
                            
                            _logger.LogInformation("API call successful - Success: {Success}, StatusCode: {StatusCode}, Message: {Message}, TransactionId: {TransactionId}",
                                apiResponse.Success, apiResponse.StatusCode, apiResponse.StatusMessage, apiResponse.TransactionId);
                            
                            return apiResponse;
                        }
                        else
                        {
                            _logger.LogWarning("API returned null response despite success status");
                        }
                    }
                    catch (JsonException ex)
                    {
                        activity?.SetTag("json.parse.error", true);
                        _logger.LogError(ex, "Failed to parse successful API response: {Content}", responseContent);
                    }
                }

                // Handle authentication errors specifically with retry logic
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized && attempt <= maxRetries)
                {
                    _logger.LogWarning("API call failed with 401 Unauthorized (attempt {Attempt}/{MaxAttempts}) - clearing cached JWT token and retrying",
                        attempt, maxRetries + 1);
                    _authService.ClearCachedToken();
                    
                    activity?.SetTag("api.auth_error", true);
                    activity?.SetTag("api.token_cleared", true);
                    activity?.SetTag("retry.reason", "Unauthorized");
                    
                    var delay = baseDelayMs;
                    await Task.Delay(delay);
                    continue; // Retry with fresh token
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    _logger.LogError("API call failed with 401 Unauthorized after {Attempts} attempts", maxRetries + 1);
                    _authService.ClearCachedToken();
                    
                    activity?.SetTag("api.auth_error", true);
                    activity?.SetTag("api.token_cleared", true);
                    activity?.SetTag("final.auth_failure", true);
                    
                    return new CreditTransferApiResponse
                    {
                        Success = false,
                        StatusCode = 401,
                        StatusMessage = "Authentication failed after multiple attempts",
                        Timestamp = DateTime.UtcNow
                    };
                }

                // Handle error response
                var errorResponse = new CreditTransferApiResponse
                {
                    Success = false,
                    StatusCode = (int)response.StatusCode,
                    StatusMessage = $"API Error: {response.StatusCode}",
                    Timestamp = DateTime.UtcNow
                };

                activity?.SetTag("api.success", false);
                activity?.SetTag("api.error", errorResponse.StatusMessage);

                _logger.LogWarning("API call failed - Status: {Status}, Content: {Content}",
                    response.StatusCode, responseContent);

                    return errorResponse;
                }
                catch (HttpRequestException ex) when (attempt <= maxRetries)
                {
                    var delay = baseDelayMs * (int)Math.Pow(2, attempt - 1);
                    
                    activity?.SetTag("retry.delay", delay);
                    activity?.SetTag("retry.reason", "HttpRequestException");
                    
                    _logger.LogWarning("HTTP error during API call (attempt {Attempt}/{MaxAttempts}): {Error}. Retrying in {Delay}ms",
                        attempt, maxRetries + 1, ex.Message, delay);
                    
                    await Task.Delay(delay);
                    continue;
                }
                catch (TaskCanceledException ex) when (attempt <= maxRetries)
                {
                    var delay = baseDelayMs * (int)Math.Pow(2, attempt - 1);
                    
                    activity?.SetTag("retry.delay", delay);
                    activity?.SetTag("retry.reason", "TaskCanceledException");
                    
                    _logger.LogWarning("Timeout during API call (attempt {Attempt}/{MaxAttempts}): {Error}. Retrying in {Delay}ms",
                        attempt, maxRetries + 1, ex.Message, delay);
                    
                    await Task.Delay(delay);
                    continue;
                }
                catch (HttpRequestException ex)
                {
                    // Final attempt failed
                    activity?.SetTag("error", true);
                    activity?.SetTag("error.type", "HttpRequestException");
                    activity?.SetTag("error.message", ex.Message);
                    activity?.SetTag("final.attempt", attempt);

                    _logger.LogError(ex, "HTTP error during API call after {Attempts} attempts", maxRetries + 1);

                    return new CreditTransferApiResponse
                    {
                        Success = false,
                        StatusCode = HandlerResponse.ServiceUnavailableCode,
                        StatusMessage = "Service temporarily unavailable",
                        Timestamp = DateTime.UtcNow
                    };
                }
                catch (TaskCanceledException ex)
                {
                    // Final attempt failed
                    activity?.SetTag("error", true);
                    activity?.SetTag("error.type", "TaskCanceledException");
                    activity?.SetTag("error.message", "Request timeout");
                    activity?.SetTag("final.attempt", attempt);

                    _logger.LogError(ex, "Timeout during API call after {Attempts} attempts", maxRetries + 1);

                    return new CreditTransferApiResponse
                    {
                        Success = false,
                        StatusCode = HandlerResponse.ServiceUnavailableCode,
                        StatusMessage = "Request timeout",
                        Timestamp = DateTime.UtcNow
                    };
                }
                catch (ArgumentException)
                {
                    // Validation errors should not be retried
                    throw;
                }
                catch (Exception ex)
                {
                    // Final attempt failed with unexpected error
                    activity?.SetTag("error", true);
                    activity?.SetTag("error.type", ex.GetType().Name);
                    activity?.SetTag("error.message", ex.Message);
                    activity?.SetTag("final.attempt", attempt);

                    _logger.LogError(ex, "Unexpected error during API call after {Attempts} attempts", maxRetries + 1);

                    return new CreditTransferApiResponse
                    {
                        Success = false,
                        StatusCode = HandlerResponse.ServiceUnavailableCode,
                        StatusMessage = "Internal error",
                        Timestamp = DateTime.UtcNow
                    };
                }
            }
            
            // This should never be reached
            throw new InvalidOperationException("Failed to complete API call after all retry attempts");
        }
    }
} 