// This code was generated by Cursor
using System.Xml;
using CreditTransfer.Services.WebHandler.Models;
using System.Diagnostics;

namespace CreditTransfer.Services.WebHandler.Services
{
    /// <summary>
    /// Service for processing XML requests and responses (migrated from original CreditTransferHandler.cs)
    /// </summary>
    public class XmlProcessingService : IXmlProcessingService
    {
        private readonly ILogger<XmlProcessingService> _logger;
        private readonly IConfiguration _configuration;
        private readonly ActivitySource _activitySource;

        public XmlProcessingService(
            ILogger<XmlProcessingService> logger,
            IConfiguration configuration,
            ActivitySource activitySource)
        {
            _logger = logger;
            _configuration = configuration;
            _activitySource = activitySource;
        }

        public CreditTransferRequest ParseXmlRequest(string xmlContent)
        {
            using var activity = _activitySource.StartActivity("XmlProcessingService.ParseXmlRequest");
            
            try
            {
                _logger.LogDebug("Parsing XML request: {XmlContent}", xmlContent);
                activity?.SetTag("xml.parsing.started", true);

                var document = new XmlDocument();
                document.LoadXml(xmlContent);

                // Check for exec_req element
                var execReqNodes = document.GetElementsByTagName("exec_req");
                if (execReqNodes == null || execReqNodes.Count == 0)
                {
                    activity?.SetTag("xml.parsing.error", "exec_req element not found");
                    throw new ArgumentException("Invalid XML: exec_req element not found");
                }

                // Extract data elements
                var xmlList = document.GetElementsByTagName("data");
                if (xmlList == null || xmlList.Count == 0)
                {
                    activity?.SetTag("xml.parsing.error", "data elements not found");
                    throw new ArgumentException("Invalid XML: data elements not found");
                }

                var parameters = new XmlRequestParameters();

                foreach (XmlNode node in xmlList)
                {
                    var nameAttribute = node.Attributes?["name"];
                    if (nameAttribute == null) continue;

                    switch (nameAttribute.Value)
                    {
                        case XmlUSSDParams.SourceMsisdn:
                            parameters.SourceMsisdn = node.InnerText;
                            activity?.SetTag("xml.source_msisdn", parameters.SourceMsisdn);
                            break;
                        case XmlUSSDParams.DestinationMsisdn:
                            parameters.DestinationMsisdn = node.InnerText;
                            activity?.SetTag("xml.destination_msisdn", parameters.DestinationMsisdn);
                            break;
                        case XmlUSSDParams.AmountRiyal:
                            if (int.TryParse(node.InnerText, out var riyal))
                            {
                                parameters.AmountRiyal = riyal;
                                activity?.SetTag("xml.amount_riyal", riyal);
                            }
                            break;
                        case XmlUSSDParams.AmountHalala:
                            if (int.TryParse(node.InnerText, out var halala))
                            {
                                parameters.AmountHalala = halala;
                                activity?.SetTag("xml.amount_halala", halala);
                            }
                            break;
                        case XmlUSSDParams.PIN:
                            parameters.Pin = node.InnerText;
                            activity?.SetTag("xml.pin_provided", !string.IsNullOrEmpty(parameters.Pin));
                            break;
                    }

                    _logger.LogDebug("Extracted XML parameter: {Name} = {Value}", nameAttribute.Value, node.InnerText);
                }

                // Apply country code transformation to destination MSISDN (matching original logic)
                var countryCode = _configuration["CountryCode"] ?? "968";
                if (!string.IsNullOrEmpty(parameters.DestinationMsisdn))
                {
                    var originalDestination = parameters.DestinationMsisdn;
                    parameters.DestinationMsisdn = countryCode + parameters.DestinationMsisdn.TrimStart('0');
                    
                    _logger.LogDebug("Applied country code transformation: {Original} -> {Transformed}",
                        originalDestination, parameters.DestinationMsisdn);
                    
                    activity?.SetTag("xml.destination_transformed", parameters.DestinationMsisdn);
                }

                // Convert to CreditTransferRequest format
                var request = new CreditTransferRequest
                {
                    SourceMsisdn = parameters.SourceMsisdn,
                    DestinationMsisdn = parameters.DestinationMsisdn,
                    Amount = parameters.AmountRiyal + (parameters.AmountHalala / 1000.0m), // Convert Baisa to decimal
                    AmountRiyal = parameters.AmountRiyal,
                    AmountBaisa = parameters.AmountHalala,
                    Pin = parameters.Pin
                };

                activity?.SetTag("xml.parsing.success", true);
                activity?.SetTag("xml.final_amount", request.Amount);

                _logger.LogInformation("Successfully parsed XML request - Source: {Source}, Destination: {Destination}, Amount: {Amount}",
                    request.SourceMsisdn, request.DestinationMsisdn, request.Amount);

                return request;
            }
            catch (XmlException ex)
            {
                activity?.SetTag("xml.parsing.error", ex.Message);
                _logger.LogError(ex, "XML parsing error");
                throw new ArgumentException("Invalid XML format", ex);
            }
            catch (Exception ex)
            {
                activity?.SetTag("xml.parsing.error", ex.Message);
                _logger.LogError(ex, "Error parsing XML request");
                throw;
            }
        }

        public string GenerateXmlResponse(CreditTransferApiResponse apiResponse)
        {
            using var activity = _activitySource.StartActivity("XmlProcessingService.GenerateXmlResponse");
            
            try
            {
                var result = apiResponse.Success ? ServiceHttpResponse.USSDPositive : ServiceHttpResponse.USSDNegative;
                var code = apiResponse.StatusCode;

                activity?.SetTag("xml.response.success", apiResponse.Success);
                activity?.SetTag("xml.response.code", code);
                activity?.SetTag("xml.response.result", result);

                var xmlResponse = string.Format(HttpResponseTemplates.USSD, result, code);

                _logger.LogDebug("Generated XML response: {XmlResponse}", xmlResponse);

                return xmlResponse;
            }
            catch (Exception ex)
            {
                activity?.SetTag("xml.response.error", ex.Message);
                _logger.LogError(ex, "Error generating XML response");
                throw;
            }
        }

        public string GenerateXmlErrorResponse(int errorCode, string errorMessage)
        {
            using var activity = _activitySource.StartActivity("XmlProcessingService.GenerateXmlErrorResponse");
            
            try
            {
                activity?.SetTag("xml.error.code", errorCode);
                activity?.SetTag("xml.error.message", errorMessage);

                var xmlResponse = string.Format(HttpResponseTemplates.USSD, errorMessage, errorCode);

                _logger.LogDebug("Generated XML error response: {XmlResponse}", xmlResponse);

                return xmlResponse;
            }
            catch (Exception ex)
            {
                activity?.SetTag("xml.error.generation.error", ex.Message);
                _logger.LogError(ex, "Error generating XML error response");
                
                // Fallback to basic error response
                return string.Format(HttpResponseTemplates.USSD, 
                    HandlerResponse.ServiceUnavailableMessage, 
                    HandlerResponse.ServiceUnavailableCode);
            }
        }
    }
} 