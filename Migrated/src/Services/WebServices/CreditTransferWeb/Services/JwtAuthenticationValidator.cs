// This code was generated by Cursor
using System.IdentityModel.Tokens.Jwt;

namespace CreditTransfer.Services.WebHandler.Services
{
    /// <summary>
    /// Service to validate JWT authentication configuration at startup
    /// </summary>
    public static class JwtAuthenticationValidator
    {
        /// <summary>
        /// Validates Keycloak JWT authentication configuration
        /// </summary>
        /// <param name="configuration">Application configuration</param>
        /// <param name="logger">Logger for validation messages</param>
        /// <returns>True if configuration is valid</returns>
        public static bool ValidateConfiguration(IConfiguration configuration, ILogger logger)
        {
            var isValid = true;
            var errors = new List<string>();
            var warnings = new List<string>();

            try
            {
                logger.LogInformation("üîç Validating JWT authentication configuration...");

                // Check required Keycloak settings
                var tokenEndpoint = configuration["Keycloak:TokenEndpoint"];
                var clientId = configuration["Keycloak:ClientId"];
                var clientSecret = configuration["Keycloak:ClientSecret"];
                var authority = configuration["Keycloak:Authority"];

                if (string.IsNullOrEmpty(tokenEndpoint))
                {
                    errors.Add("Keycloak:TokenEndpoint is missing or empty");
                    isValid = false;
                }
                else if (!Uri.TryCreate(tokenEndpoint, UriKind.Absolute, out var tokenUri))
                {
                    errors.Add($"Keycloak:TokenEndpoint is not a valid URL: {tokenEndpoint}");
                    isValid = false;
                }
                else if (tokenUri.Scheme != "http" && tokenUri.Scheme != "https")
                {
                    errors.Add($"Keycloak:TokenEndpoint must use HTTP or HTTPS: {tokenEndpoint}");
                    isValid = false;
                }

                if (string.IsNullOrEmpty(clientId))
                {
                    errors.Add("Keycloak:ClientId is missing or empty");
                    isValid = false;
                }

                if (string.IsNullOrEmpty(clientSecret))
                {
                    errors.Add("Keycloak:ClientSecret is missing or empty");
                    isValid = false;
                }
                else if (clientSecret == "your-client-secret")
                {
                    warnings.Add("Keycloak:ClientSecret appears to be a placeholder value");
                }

                if (string.IsNullOrEmpty(authority))
                {
                    warnings.Add("Keycloak:Authority is missing - this may be needed for JWT validation");
                }

                // Check API configuration
                var apiBaseUrl = configuration["CreditTransferApi:BaseUrl"];
                var apiEndpoint = configuration["CreditTransferApi:TransferEndpoint"];

                if (string.IsNullOrEmpty(apiBaseUrl))
                {
                    errors.Add("CreditTransferApi:BaseUrl is missing or empty");
                    isValid = false;
                }
                else if (!Uri.TryCreate(apiBaseUrl, UriKind.Absolute, out var apiUri))
                {
                    errors.Add($"CreditTransferApi:BaseUrl is not a valid URL: {apiBaseUrl}");
                    isValid = false;
                }

                if (string.IsNullOrEmpty(apiEndpoint))
                {
                    warnings.Add("CreditTransferApi:TransferEndpoint is missing - using default");
                }

                // Check optional settings
                var grantType = configuration["Keycloak:GrantType"];
                if (string.IsNullOrEmpty(grantType))
                {
                    warnings.Add("Keycloak:GrantType is missing - using default 'client_credentials'");
                }
                else if (grantType != "client_credentials")
                {
                    warnings.Add($"Keycloak:GrantType is '{grantType}' - expected 'client_credentials' for service-to-service authentication");
                }

                var scope = configuration["Keycloak:Scope"];
                if (string.IsNullOrEmpty(scope))
                {
                    warnings.Add("Keycloak:Scope is missing - using default 'openid profile email'");
                }

                // Log results
                if (errors.Count > 0)
                {
                    logger.LogError("‚ùå JWT authentication configuration validation failed:");
                    foreach (var error in errors)
                    {
                        logger.LogError("  - {Error}", error);
                    }
                }

                if (warnings.Count > 0)
                {
                    logger.LogWarning("‚ö†Ô∏è JWT authentication configuration warnings:");
                    foreach (var warning in warnings)
                    {
                        logger.LogWarning("  - {Warning}", warning);
                    }
                }

                if (isValid)
                {
                    logger.LogInformation("‚úÖ JWT authentication configuration validation passed");
                }

                return isValid;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå Error during JWT authentication configuration validation");
                return false;
            }
        }

        /// <summary>
        /// Tests JWT token parsing capability
        /// </summary>
        /// <param name="logger">Logger for test messages</param>
        /// <returns>True if JWT handler is working correctly</returns>
        public static bool TestJwtHandler(ILogger logger)
        {
            try
            {
                logger.LogDebug("üß™ Testing JWT token handler...");

                var handler = new JwtSecurityTokenHandler();
                
                // Create a sample JWT token for testing (this is a valid but fake token)
                var sampleToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjo5OTk5OTk5OTk5fQ.Lp9ZFdllOSUjZmDYlubcMGanWovGJVLJPrQEyOzKDIY";

                if (!handler.CanReadToken(sampleToken))
                {
                    logger.LogError("‚ùå JWT handler cannot read sample token");
                    return false;
                }

                var token = handler.ReadJwtToken(sampleToken);
                if (token == null)
                {
                    logger.LogError("‚ùå JWT handler returned null for sample token");
                    return false;
                }

                logger.LogDebug("‚úÖ JWT token handler working correctly");
                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå JWT token handler test failed");
                return false;
            }
        }
    }
} 