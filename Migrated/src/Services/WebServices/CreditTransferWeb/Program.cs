// This code was generated by Cursor
using CreditTransfer.Infrastructure.Configuration;
using CreditTransfer.Core.Authentication.Extensions;
using Microsoft.AspNetCore.Authorization;
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;
using System.Diagnostics;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using System.Diagnostics.Metrics;
using OpenTelemetry;
using Serilog;
using CreditTransfer.Services.WebHandler.Services;

var builder = WebApplication.CreateBuilder(args);

// Configure Serilog early
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .WriteTo.File("logs/credittransfer-webhandler-.log", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Host.UseSerilog();

// Configure OpenTelemetry with comprehensive observability
const string serviceName = "CreditTransfer.WebHandler";
const string serviceVersion = "1.0.0";

// Create ActivitySource for custom tracing
var activitySource = new ActivitySource(serviceName);

builder.Services.AddOpenTelemetry()
    .ConfigureResource(resource => resource
        .AddService(serviceName: serviceName, serviceVersion: serviceVersion)
        .AddAttributes(new Dictionary<string, object>
        {
            ["service.name"] = serviceName,
            ["service.version"] = serviceVersion,
            ["service.instance.id"] = Environment.MachineName,
            ["deployment.environment"] = builder.Environment.EnvironmentName
        }))
    .WithTracing(tracing => tracing
        .AddSource(serviceName)
        .AddSource("CreditTransfer.Services.WebHandler")
        .AddSource("CreditTransfer.Services.WebHandler.Controllers")
        .AddSource("CreditTransfer.Services.WebHandler.Services")
        .SetSampler(new TraceIdRatioBasedSampler(1.0)) // Enable all traces for debugging
        .AddAspNetCoreInstrumentation(options =>
        {
            options.RecordException = true;
            options.Filter = httpContext =>
            {
                // Only exclude basic health check endpoints to reduce noise
                return !httpContext.Request.Path.StartsWithSegments("/health");
            };
            options.EnrichWithHttpRequest = (activity, httpRequest) =>
            {
                activity.SetTag("http.request.method", httpRequest.Method);
                activity.SetTag("http.request.path", httpRequest.Path);
                activity.SetTag("user_agent", httpRequest.Headers.UserAgent.ToString());
            };
            options.EnrichWithHttpResponse = (activity, httpResponse) =>
            {
                activity.SetTag("http.response.status_code", httpResponse.StatusCode);
            };
        })
        .AddHttpClientInstrumentation(options =>
        {
            options.RecordException = true;
            options.EnrichWithHttpRequestMessage = (activity, httpRequestMessage) =>
            {
                activity.SetTag("http.client.method", httpRequestMessage.Method.ToString());
                activity.SetTag("http.client.url", httpRequestMessage.RequestUri?.ToString());
            };
            options.EnrichWithHttpResponseMessage = (activity, httpResponseMessage) =>
            {
                activity.SetTag("http.client.status_code", (int)httpResponseMessage.StatusCode);
            };
        })
        .AddConsoleExporter()
        .AddOtlpExporter())
    .WithMetrics(metrics => metrics
        .AddAspNetCoreInstrumentation()
        .AddHttpClientInstrumentation()
        .AddRuntimeInstrumentation()
        .AddProcessInstrumentation()
        .AddMeter(serviceName)
        .AddPrometheusExporter()
        .AddConsoleExporter()
        .AddOtlpExporter())
    .WithLogging(logging => logging
        .AddConsoleExporter()
        .AddOtlpExporter());

// Add singleton ActivitySource for dependency injection
builder.Services.AddSingleton(activitySource);

// Add singleton Meter for metrics
var meter = new Meter(serviceName, serviceVersion);
builder.Services.AddSingleton(meter);

// Add services to the container
builder.Services.AddControllers();

// Add health checks
builder.Services.AddHealthChecks()
    .AddCheck("self", () => Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Healthy());

// Configure infrastructure services
builder.Services.AddCreditTransferServices(builder.Configuration);

// Configure authentication
builder.Services.AddKeycloak(builder.Configuration);

// Validate JWT authentication configuration at startup
using (var tempLoggerFactory = LoggerFactory.Create(b => b.AddConsole()))
{
    var tempLogger = tempLoggerFactory.CreateLogger("Startup");
    
    if (!JwtAuthenticationValidator.ValidateConfiguration(builder.Configuration, tempLogger))
    {
        throw new InvalidOperationException("JWT authentication configuration validation failed. Please check the configuration and try again.");
    }
    
    if (!JwtAuthenticationValidator.TestJwtHandler(tempLogger))
    {
        tempLogger.LogWarning("⚠️ JWT handler test failed - authentication may not work correctly");
    }
}

// Configure HTTP clients for external API calls
builder.Services.AddHttpClient<ICreditTransferApiClient, CreditTransferApiClient>(client =>
{
    var baseUrl = builder.Configuration["CreditTransferApi:BaseUrl"] ?? "http://localhost:6000";
    client.BaseAddress = new Uri(baseUrl);
    client.Timeout = TimeSpan.FromSeconds(30);
});

// Configure HTTP client for Keycloak authentication
builder.Services.AddHttpClient<IKeycloakAuthenticationService, KeycloakAuthenticationService>(client =>
{
    client.Timeout = TimeSpan.FromSeconds(30);
});

// Register application services
builder.Services.AddScoped<ICreditTransferApiClient, CreditTransferApiClient>();
builder.Services.AddScoped<IKeycloakAuthenticationService, KeycloakAuthenticationService>();
builder.Services.AddScoped<IXmlProcessingService, XmlProcessingService>();

// Configure CORS if needed for USSD gateway
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowUSSDGateway", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

// Add OpenTelemetry middleware
app.UseOpenTelemetryPrometheusScrapingEndpoint();

// Configure middleware pipeline
app.UseRouting();
app.UseCors("AllowUSSDGateway");

app.MapControllers();
app.MapHealthChecks("/health");
app.MapHealthChecks("/health/ready");
app.MapHealthChecks("/health/live");

// Add metrics endpoint
app.MapPrometheusScrapingEndpoint();

Log.Information("CreditTransfer WebHandler starting up...");

try
{
    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "Application terminated unexpectedly");
}
finally
{
    Log.CloseAndFlush();
}

 