// This code was generated by Cursor
using Microsoft.AspNetCore.Mvc;
using CreditTransfer.Services.WebHandler.Services;
using CreditTransfer.Services.WebHandler.Models;
using System.Diagnostics;
using System.Web;

namespace CreditTransfer.Services.WebHandler.Controllers
{
    /// <summary>
    /// Controller for handling XML credit transfer requests (migrated from original CreditTransferHandler.cs)
    /// </summary>
    [ApiController]
    public class CreditTransferWebController : ControllerBase
    {
        private readonly IXmlProcessingService _xmlProcessingService;
        private readonly ICreditTransferApiClient _apiClient;
        private readonly ILogger<CreditTransferWebController> _logger;
        private readonly ActivitySource _activitySource;
        private readonly IConfiguration _configuration;

        public CreditTransferWebController(
            IXmlProcessingService xmlProcessingService,
            ICreditTransferApiClient apiClient,
            ILogger<CreditTransferWebController> logger,
            ActivitySource activitySource,
            IConfiguration configuration)
        {
            _xmlProcessingService = xmlProcessingService;
            _apiClient = apiClient;
            _logger = logger;
            _activitySource = activitySource;
            _configuration = configuration;
        }

        /// <summary>
        /// Processes USSD credit transfer requests via HTTP POST
        /// Maintains compatibility with original CreditTransferHandler.cs
        /// </summary>
        /// <returns>XML response</returns>
        [HttpPost]
        [Route("/CreditTransferHandler.cs")]
        [Consumes("application/x-www-form-urlencoded")]
        [Produces("application/xml")]
        public async Task<IActionResult> ProcessUSSD()
        {
            using var activity = _activitySource.StartActivity("ProcessUSSD");
            
            try
            {
                _logger.LogInformation("Request received - Path: {Path}", Request.Path);
                activity?.SetTag("http.request.path", Request.Path);

                // Set response content type to XML
                Response.Headers["Content-Type"] = "application/xml";

                string responseResult = ServiceHttpResponse.USSDNegative;
                int responseCode = ServiceHttpResponse.USSDGenericErrorCode;
                bool isValidXML = false;

                try
                {
                    // Read and decode the request body
                    using var reader = new StreamReader(Request.Body);
                    string encodedString = await reader.ReadToEndAsync();
                    string request = HttpUtility.UrlDecode(encodedString);

                    _logger.LogDebug("Received XML request: {Request}", request);
                    activity?.SetTag("xml.request.received", true);

                    // Parse XML request
                    var transferRequest = _xmlProcessingService.ParseXmlRequest(request);
                    isValidXML = true;
                    
                    activity?.SetTag("xml.parsing.success", true);
                    activity?.SetTag("transfer.source", transferRequest.SourceMsisdn);
                    activity?.SetTag("transfer.destination", transferRequest.DestinationMsisdn);
                    activity?.SetTag("transfer.amount", transferRequest.Amount);

                    _logger.LogInformation("XML parsed successfully - Source: {Source}, Destination: {Destination}, Amount: {Amount}",
                        transferRequest.SourceMsisdn, transferRequest.DestinationMsisdn, transferRequest.Amount);

                    // Call REST API
                    var apiResponse = await _apiClient.TransferCreditAsync(transferRequest);
                    
                    activity?.SetTag("api.call.success", apiResponse.Success);
                    activity?.SetTag("api.response.code", apiResponse.StatusCode);

                    _logger.LogInformation("API call completed - Success: {Success}, StatusCode: {StatusCode}, Message: {Message}",
                        apiResponse.Success, apiResponse.StatusCode, apiResponse.StatusMessage);

                    // Generate XML response
                    if (apiResponse.Success)
                    {
                        responseResult = ServiceHttpResponse.USSDPositive;
                        responseCode = 0;
                    }
                    else
                    {
                        responseResult = ServiceHttpResponse.USSDNegative;
                        responseCode = apiResponse.StatusCode;
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error processing USSD request");
                    activity?.SetTag("error", true);
                    activity?.SetTag("error.message", ex.Message);

                    if (!isValidXML)
                    {
                        responseCode = HandlerResponse.BadRequestCode;
                        responseResult = HandlerResponse.BadRequestMessage;
                    }
                    else
                    {
                        responseCode = HandlerResponse.ServiceUnavailableCode;
                        responseResult = HandlerResponse.ServiceUnavailableMessage;
                    }
                }

                // For debugging - uncomment if needed (matching original behavior)
                // responseResult = "OK";

                var xmlResponse = string.Format(HttpResponseTemplates.USSD, responseResult, responseCode);
                
                _logger.LogInformation("Returning XML response - Result: {Result}, Code: {Code}", responseResult, responseCode);
                activity?.SetTag("response.result", responseResult);
                activity?.SetTag("response.code", responseCode);

                return Content(xmlResponse, "application/xml");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error in ProcessUSSD");
                activity?.SetTag("error", true);
                activity?.SetTag("error.message", ex.Message);

                var errorResponse = string.Format(HttpResponseTemplates.USSD, 
                    HandlerResponse.ServiceUnavailableMessage, 
                    HandlerResponse.ServiceUnavailableCode);
                
                return Content(errorResponse, "application/xml");
            }
        }

        /// <summary>
        /// Health check endpoint
        /// </summary>
        [HttpGet("/health")]
        public IActionResult Health()
        {
            return Ok(new { Status = "Healthy", Service = "CreditTransfer WebHandler", Timestamp = DateTime.UtcNow });
        }
    }
} 