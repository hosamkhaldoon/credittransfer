// This code was generated by Cursor
using Microsoft.AspNetCore.Mvc;
using CreditTransfer.Services.WebHandler.Services;
using System.Diagnostics;

namespace CreditTransfer.Services.WebHandler.Controllers
{
    /// <summary>
    /// Test controller for JWT authentication verification (development only)
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class JwtTestController : ControllerBase
    {
        private readonly IKeycloakAuthenticationService _authService;
        private readonly ICreditTransferApiClient _apiClient;
        private readonly ILogger<JwtTestController> _logger;
        private readonly ActivitySource _activitySource;

        public JwtTestController(
            IKeycloakAuthenticationService authService,
            ICreditTransferApiClient apiClient,
            ILogger<JwtTestController> logger,
            ActivitySource activitySource)
        {
            _authService = authService;
            _apiClient = apiClient;
            _logger = logger;
            _activitySource = activitySource;
        }

        /// <summary>
        /// Test JWT token acquisition from Keycloak
        /// </summary>
        [HttpGet("test-auth")]
        public async Task<IActionResult> TestAuthentication()
        {
            using var activity = _activitySource.StartActivity("JwtTest.TestAuthentication");
            
            try
            {
                _logger.LogInformation("üß™ Testing JWT authentication...");

                // Test token acquisition
                var stopwatch = Stopwatch.StartNew();
                var token = await _authService.GetAccessTokenAsync();
                stopwatch.Stop();

                if (string.IsNullOrEmpty(token))
                {
                    return BadRequest(new { 
                        Status = "Failed", 
                        Error = "Failed to acquire JWT token",
                        Timestamp = DateTime.UtcNow 
                    });
                }

                // Test token caching
                var stopwatch2 = Stopwatch.StartNew();
                var cachedToken = await _authService.GetAccessTokenAsync();
                stopwatch2.Stop();

                var result = new
                {
                    Status = "Success",
                    TokenAcquired = true,
                    TokenLength = token.Length,
                    TokenStartsWith = token.Substring(0, Math.Min(20, token.Length)) + "...",
                    FirstCallDuration = $"{stopwatch.ElapsedMilliseconds}ms",
                    SecondCallDuration = $"{stopwatch2.ElapsedMilliseconds}ms",
                    TokenCached = stopwatch2.ElapsedMilliseconds < 10, // Should be much faster if cached
                    TokenValid = _authService.IsTokenValid(),
                    Timestamp = DateTime.UtcNow
                };

                activity?.SetTag("test.success", true);
                activity?.SetTag("test.token.length", token.Length);
                activity?.SetTag("test.first.duration", stopwatch.ElapsedMilliseconds);
                activity?.SetTag("test.second.duration", stopwatch2.ElapsedMilliseconds);

                _logger.LogInformation("‚úÖ JWT authentication test successful - Token length: {TokenLength}, Cached: {Cached}",
                    token.Length, result.TokenCached);

                return Ok(result);
            }
            catch (Exception ex)
            {
                activity?.SetTag("test.success", false);
                activity?.SetTag("test.error", ex.Message);

                _logger.LogError(ex, "‚ùå JWT authentication test failed");

                return StatusCode(500, new { 
                    Status = "Error", 
                    Error = ex.Message, 
                    Type = ex.GetType().Name,
                    Timestamp = DateTime.UtcNow 
                });
            }
        }

        /// <summary>
        /// Test full API call with JWT authentication
        /// </summary>
        [HttpGet("test-api-call")]
        public async Task<IActionResult> TestApiCall()
        {
            using var activity = _activitySource.StartActivity("JwtTest.TestApiCall");
            
            try
            {
                _logger.LogInformation("üß™ Testing API call with JWT authentication...");

                // Create a test request (this won't actually transfer credit, just test the API call structure)
                var testRequest = new Models.CreditTransferRequest
                {
                    SourceMsisdn = "96812345678",
                    DestinationMsisdn = "96887654321",
                    Amount = 1.0m,
                    Pin = "0000"
                };

                var stopwatch = Stopwatch.StartNew();
                var response = await _apiClient.TransferCreditAsync(testRequest);
                stopwatch.Stop();

                activity?.SetTag("api.test.success", response.Success);
                activity?.SetTag("api.test.status_code", response.StatusCode);
                activity?.SetTag("api.test.duration", stopwatch.ElapsedMilliseconds);

                var result = new
                {
                    Status = "API Call Completed",
                    ApiResponse = new
                    {
                        Success = response.Success,
                        StatusCode = response.StatusCode,
                        StatusMessage = response.StatusMessage,
                        TransactionId = response.TransactionId
                    },
                    CallDuration = $"{stopwatch.ElapsedMilliseconds}ms",
                    Timestamp = DateTime.UtcNow,
                    Note = "This is a test call - no actual credit transfer occurred"
                };

                _logger.LogInformation("‚úÖ API call test completed - Success: {Success}, StatusCode: {StatusCode}, Duration: {Duration}ms",
                    response.Success, response.StatusCode, stopwatch.ElapsedMilliseconds);

                return Ok(result);
            }
            catch (Exception ex)
            {
                activity?.SetTag("api.test.success", false);
                activity?.SetTag("api.test.error", ex.Message);

                _logger.LogError(ex, "‚ùå API call test failed");

                return StatusCode(500, new { 
                    Status = "API Call Error", 
                    Error = ex.Message, 
                    Type = ex.GetType().Name,
                    Timestamp = DateTime.UtcNow 
                });
            }
        }

        /// <summary>
        /// Test the enhanced API client with retry logic and error handling
        /// </summary>
        [HttpGet("test-enhanced-api")]
        public async Task<IActionResult> TestEnhancedApiClient()
        {
            using var activity = _activitySource.StartActivity("JwtTest.TestEnhancedApiClient");
            
            try
            {
                _logger.LogInformation("üß™ Testing enhanced API client with retry logic...");

                var results = new List<object>();

                // Test 1: Valid request
                _logger.LogInformation("Test 1: Valid request");
                var validRequest = new Models.CreditTransferRequest
                {
                    SourceMsisdn = "96812345678",
                    DestinationMsisdn = "96887654321",
                    Amount = 5.0m,
                    Pin = "1234"
                };

                var stopwatch1 = Stopwatch.StartNew();
                var response1 = await _apiClient.TransferCreditAsync(validRequest);
                stopwatch1.Stop();

                results.Add(new
                {
                    Test = "Valid Request",
                    Success = response1.Success,
                    StatusCode = response1.StatusCode,
                    StatusMessage = response1.StatusMessage,
                    TransactionId = response1.TransactionId,
                    Duration = $"{stopwatch1.ElapsedMilliseconds}ms"
                });

                // Test 2: Request validation (empty source)
                _logger.LogInformation("Test 2: Request validation (empty source)");
                try
                {
                    var invalidRequest = new Models.CreditTransferRequest
                    {
                        SourceMsisdn = "",
                        DestinationMsisdn = "96887654321",
                        Amount = 1.0m,
                        Pin = "1234"
                    };

                    await _apiClient.TransferCreditAsync(invalidRequest);
                    results.Add(new { Test = "Empty Source Validation", Result = "FAILED - Should have thrown exception" });
                }
                catch (ArgumentException ex)
                {
                    results.Add(new { Test = "Empty Source Validation", Result = "PASSED", Error = ex.Message });
                }

                // Test 3: Request validation (zero amount)
                _logger.LogInformation("Test 3: Request validation (zero amount)");
                try
                {
                    var zeroAmountRequest = new Models.CreditTransferRequest
                    {
                        SourceMsisdn = "96812345678",
                        DestinationMsisdn = "96887654321",
                        Amount = 0m,
                        Pin = "1234"
                    };

                    await _apiClient.TransferCreditAsync(zeroAmountRequest);
                    results.Add(new { Test = "Zero Amount Validation", Result = "FAILED - Should have thrown exception" });
                }
                catch (ArgumentException ex)
                {
                    results.Add(new { Test = "Zero Amount Validation", Result = "PASSED", Error = ex.Message });
                }

                // Test 4: Multiple concurrent requests (test thread safety)
                _logger.LogInformation("Test 4: Multiple concurrent requests");
                var concurrentTasks = new List<Task<Models.CreditTransferApiResponse>>();
                var concurrentStopwatch = Stopwatch.StartNew();

                for (int i = 0; i < 3; i++)
                {
                    var concurrentRequest = new Models.CreditTransferRequest
                    {
                        SourceMsisdn = $"9681234567{i}",
                        DestinationMsisdn = $"9688765432{i}",
                        Amount = 1.0m + i,
                        Pin = "1234"
                    };
                    concurrentTasks.Add(_apiClient.TransferCreditAsync(concurrentRequest));
                }

                var concurrentResults = await Task.WhenAll(concurrentTasks);
                concurrentStopwatch.Stop();

                results.Add(new
                {
                    Test = "Concurrent Requests",
                    RequestCount = concurrentTasks.Count,
                    CompletedCount = concurrentResults.Length,
                    TotalDuration = $"{concurrentStopwatch.ElapsedMilliseconds}ms",
                    Results = concurrentResults.Select((r, i) => new
                    {
                        Index = i,
                        Success = r.Success,
                        StatusCode = r.StatusCode,
                        StatusMessage = r.StatusMessage
                    }).ToArray()
                });

                var summary = new
                {
                    Status = "Enhanced API Client Test Completed",
                    TestResults = results,
                    TotalTests = results.Count,
                    Timestamp = DateTime.UtcNow,
                    Note = "Enhanced API client includes retry logic, better error handling, validation, and improved JSON processing"
                };

                activity?.SetTag("enhanced.test.success", true);
                activity?.SetTag("enhanced.test.count", results.Count);

                _logger.LogInformation("‚úÖ Enhanced API client test completed - {TestCount} tests executed", results.Count);

                return Ok(summary);
            }
            catch (Exception ex)
            {
                activity?.SetTag("enhanced.test.success", false);
                activity?.SetTag("enhanced.test.error", ex.Message);

                _logger.LogError(ex, "‚ùå Enhanced API client test failed");

                return StatusCode(500, new { 
                    Status = "Enhanced API Test Error", 
                    Error = ex.Message, 
                    Type = ex.GetType().Name,
                    Timestamp = DateTime.UtcNow 
                });
            }
        }

        /// <summary>
        /// Test the complete XML to API flow
        /// </summary>
        [HttpPost("test-xml-flow")]
        public async Task<IActionResult> TestXmlFlow()
        {
            using var activity = _activitySource.StartActivity("JwtTest.TestXmlFlow");
            
            try
            {
                _logger.LogInformation("üß™ Testing complete XML to API flow...");

                // Sample XML from original system
                var sampleXml = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><umsprot version=\"1\"><exec_req><data name=\"SourceMsisdn\">96812345678</data><data name=\"DestinationMsisdn\">87654321</data><data name=\"AmountRiyal\">1</data><data name=\"AmountHalala\">0</data><data name=\"PIN\">0000</data></exec_req></umsprot>";

                // Simulate the XML processing by calling the actual controller
                // We'll make an HTTP request to our own ProcessUSSD endpoint
                var client = new HttpClient();
                client.BaseAddress = new Uri($"http://localhost:{HttpContext.Request.Host.Port}");

                var content = new StringContent(sampleXml, System.Text.Encoding.UTF8, "application/x-www-form-urlencoded");

                var stopwatch = Stopwatch.StartNew();
                var response = await client.PostAsync("/CreditTransferHandler.cs", content);
                stopwatch.Stop();

                var responseContent = await response.Content.ReadAsStringAsync();

                activity?.SetTag("xml.test.success", response.IsSuccessStatusCode);
                activity?.SetTag("xml.test.status_code", (int)response.StatusCode);
                activity?.SetTag("xml.test.duration", stopwatch.ElapsedMilliseconds);

                var result = new
                {
                    Status = "XML Flow Test Completed",
                    HttpStatusCode = (int)response.StatusCode,
                    HttpStatus = response.StatusCode.ToString(),
                    ResponseContent = responseContent,
                    ContentType = response.Content.Headers.ContentType?.ToString(),
                    CallDuration = $"{stopwatch.ElapsedMilliseconds}ms",
                    InputXml = sampleXml,
                    Timestamp = DateTime.UtcNow
                };

                _logger.LogInformation("‚úÖ XML flow test completed - HTTP Status: {Status}, Duration: {Duration}ms",
                    response.StatusCode, stopwatch.ElapsedMilliseconds);

                return Ok(result);
            }
            catch (Exception ex)
            {
                activity?.SetTag("xml.test.success", false);
                activity?.SetTag("xml.test.error", ex.Message);

                _logger.LogError(ex, "‚ùå XML flow test failed");

                return StatusCode(500, new { 
                    Status = "XML Flow Error", 
                    Error = ex.Message, 
                    Type = ex.GetType().Name,
                    Timestamp = DateTime.UtcNow 
                });
            }
        }
    }
} 