name: "Security - Comprehensive Scanning"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dependencies
          - containers
          - secrets

env:
  DOTNET_VERSION: '8.0.100'

jobs:
  # Job 1: Static Application Security Testing (SAST)
  sast-analysis:
    name: "SAST Analysis"
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == ''
    timeout-minutes: 20

    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üîß Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "üì¶ Cache NuGet Packages"
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: "üîç Initialize CodeQL"
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-extended

    - name: "üîÑ Restore Dependencies"
      run: dotnet restore CreditTransfer.Modern.sln --verbosity minimal

    - name: "üèóÔ∏è Build Solution"
      run: |
        dotnet build CreditTransfer.Modern.sln \
          --configuration Release \
          --no-restore \
          --verbosity minimal

    - name: "üîç Perform CodeQL Analysis"
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

    - name: "üõ°Ô∏è Run Security Code Scan"
      run: |
        # Install security code analyzer
        dotnet tool install --global security-scan
        
        # Run security analysis on the solution
        security-scan --project CreditTransfer.Modern.sln --report security-scan-results.json || true

    - name: "üìã Upload Security Scan Results"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: security-scan-results.json
        retention-days: 30

  # Job 2: Dependency Vulnerability Scanning
  dependency-scan:
    name: "Dependency Vulnerability Scan"
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    timeout-minutes: 10

    permissions:
      security-events: write
      contents: read

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4

    - name: "üîß Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "üîç Run Dependency Review"
      uses: actions/dependency-review-action@v4
      with:
        config-file: './.github/dependency-review-config.yml'
        fail-on-severity: high
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC, GPL-3.0

    - name: "üîç Scan Dependencies with Trivy"
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'dependency-scan.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: "üìã Upload Dependency Scan Results"
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'dependency-scan.sarif'
        category: 'dependencies'

    - name: "üîç Run .NET Security Audit"
      run: |
        # Restore packages first
        dotnet restore CreditTransfer.Modern.sln
        
        # Run security audit
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt 2>&1 || true
        
        # Check if vulnerabilities were found
        if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
          echo "‚ùå Vulnerable packages found!"
          cat vulnerable-packages.txt
          exit 1
        else
          echo "‚úÖ No vulnerable packages found"
        fi

    - name: "üìã Upload Vulnerability Report"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: vulnerable-packages.txt
        retention-days: 30

  # Job 3: Container Security Scanning
  container-scan:
    name: "Container Security Scan"
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    timeout-minutes: 15

    permissions:
      security-events: write
      contents: read

    strategy:
      matrix:
        service: [api, wcf, worker, web]
        include:
          - service: api
            dockerfile: src/Services/ApiServices/CreditTransferApi/Dockerfile
          - service: wcf
            dockerfile: src/Services/WebServices/CreditTransferService/Dockerfile
          - service: worker
            dockerfile: src/Services/WorkerServices/CreditTransferWorker/Dockerfile
          - service: web
            dockerfile: src/Services/WebServices/CreditTransferWeb/Dockerfile

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4

    - name: "üîß Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3

    - name: "üèóÔ∏è Build Docker Image for Scanning"
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        load: true
        tags: credittransfer-${{ matrix.service }}:scan
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}

    - name: "üîç Scan Image with Trivy"
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: credittransfer-${{ matrix.service }}:scan
        format: 'sarif'
        output: 'container-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: "üìã Upload Container Scan Results"
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'container-${{ matrix.service }}.sarif'
        category: 'container-${{ matrix.service }}'

    - name: "üîç Detailed Vulnerability Report"
      run: |
        echo "=== Container Security Report: ${{ matrix.service }} ===" | tee container-${{ matrix.service }}-report.txt
        trivy image --format table credittransfer-${{ matrix.service }}:scan | tee -a container-${{ matrix.service }}-report.txt

    - name: "üìã Upload Detailed Report"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: container-report-${{ matrix.service }}
        path: container-${{ matrix.service }}-report.txt
        retention-days: 30

  # Job 4: Secret Scanning
  secret-scan:
    name: "Secret Scanning"
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    timeout-minutes: 10

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üîç Run TruffleHog Secret Scan"
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: "üîç Run GitLeaks Secret Scan"
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Job 5: Security Configuration Audit
  config-audit:
    name: "Security Configuration Audit"
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == '' 
    timeout-minutes: 10

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4

    - name: "üîç Audit Docker Configurations"
      run: |
        echo "=== Docker Security Audit ===" | tee docker-security-audit.txt
        
        # Check Dockerfiles for security best practices
        for dockerfile in $(find . -name "Dockerfile" -type f); do
          echo "Auditing: $dockerfile" | tee -a docker-security-audit.txt
          
          # Check for running as root
          if ! grep -q "USER" "$dockerfile"; then
            echo "‚ö†Ô∏è  $dockerfile: No USER directive found (runs as root)" | tee -a docker-security-audit.txt
          fi
          
          # Check for COPY --chown usage
          if grep -q "COPY.*--chown" "$dockerfile"; then
            echo "‚úÖ $dockerfile: Uses COPY --chown for proper ownership" | tee -a docker-security-audit.txt
          fi
          
          # Check for specific version tags
          if grep -q "FROM.*:latest" "$dockerfile"; then
            echo "‚ö†Ô∏è  $dockerfile: Uses :latest tag, consider specific versions" | tee -a docker-security-audit.txt
          fi
          
          echo "---" | tee -a docker-security-audit.txt
        done

    - name: "üîç Audit Configuration Files"
      run: |
        echo "=== Configuration Security Audit ===" | tee -a config-security-audit.txt
        
        # Check for sensitive data in configuration files
        find . -name "appsettings*.json" -type f | while read -r config_file; do
          echo "Auditing: $config_file" | tee -a config-security-audit.txt
          
          # Check for potential secrets (basic patterns)
          if grep -i "password\|secret\|key\|token" "$config_file" | grep -v "{{"; then
            echo "‚ö†Ô∏è  Potential sensitive data found in $config_file" | tee -a config-security-audit.txt
          else
            echo "‚úÖ No obvious sensitive data in $config_file" | tee -a config-security-audit.txt
          fi
        done

    - name: "üìã Upload Security Audit Reports"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-reports
        path: |
          docker-security-audit.txt
          config-security-audit.txt
        retention-days: 30

  # Job 6: Security Summary
  security-summary:
    name: "Security Summary"
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, container-scan, secret-scan, config-audit]
    if: always()

    steps:
    - name: "üìä Generate Security Summary"
      run: |
        echo "# üõ°Ô∏è Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìã Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| SAST Analysis | ${{ needs.sast-analysis.result == 'success' && '‚úÖ Passed' || (needs.sast-analysis.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | Static application security testing |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '‚úÖ Passed' || (needs.dependency-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | Vulnerable dependency detection |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '‚úÖ Passed' || (needs.container-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | Docker image vulnerability scan |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '‚úÖ Passed' || (needs.secret-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | Exposed secrets detection |" >> $GITHUB_STEP_SUMMARY
        echo "| Config Audit | ${{ needs.config-audit.result == 'success' && '‚úÖ Passed' || (needs.config-audit.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | Security configuration review |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall security status
        ALL_PASSED=true
        if [ "${{ needs.sast-analysis.result }}" != "success" ] && [ "${{ needs.sast-analysis.result }}" != "skipped" ]; then ALL_PASSED=false; fi
        if [ "${{ needs.dependency-scan.result }}" != "success" ] && [ "${{ needs.dependency-scan.result }}" != "skipped" ]; then ALL_PASSED=false; fi
        if [ "${{ needs.container-scan.result }}" != "success" ] && [ "${{ needs.container-scan.result }}" != "skipped" ]; then ALL_PASSED=false; fi
        if [ "${{ needs.secret-scan.result }}" != "success" ] && [ "${{ needs.secret-scan.result }}" != "skipped" ]; then ALL_PASSED=false; fi
        if [ "${{ needs.config-audit.result }}" != "success" ] && [ "${{ needs.config-audit.result }}" != "skipped" ]; then ALL_PASSED=false; fi
        
        if [ "$ALL_PASSED" = true ]; then
          echo "## üéâ Overall Security Status: ‚úÖ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security scans completed successfully. No critical vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ö†Ô∏è Overall Security Status: ‚ùå ISSUES DETECTED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security issues were detected. Please review the scan results and address any critical vulnerabilities." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review detailed scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Address any high or critical severity findings" >> $GITHUB_STEP_SUMMARY
        echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "4. Review and remediate any exposed secrets" >> $GITHUB_STEP_SUMMARY