name: "SonarCloud - Code Quality Analysis"

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - incremental
          - security-hotspots
      upload_results:
        description: 'Upload results to SonarCloud'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  SONAR_SCANNER_VERSION: '5.0.1.3006'
  BUILD_CONFIGURATION: Release

jobs:
  # Job 1: SonarCloud Analysis
  sonarcloud-analysis:
    name: "SonarCloud Code Analysis"
    runs-on: windows-latest
    timeout-minutes: 30

    permissions:
      pull-requests: read
      contents: read

    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: "🔧 Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "☕ Setup Java 17"
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: "📦 Cache SonarCloud Packages"
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: "📦 Cache NuGet Packages"
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: "🔧 Install SonarCloud Scanner"
      shell: powershell
      run: |
        dotnet tool install --global dotnet-sonarscanner --version ${{ env.SONAR_SCANNER_VERSION }}
        dotnet tool list -g

    - name: "🔧 Install Coverage Tools"
      shell: powershell
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global coverlet.console

    - name: "🔍 Begin SonarCloud Analysis"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        # Determine analysis parameters
        $analysisArgs = @()
        
        # Basic parameters
        $analysisArgs += "/k:""credittransfer-modern"""
        $analysisArgs += "/o:""virgin-group"""
        $analysisArgs += "/d:sonar.token=""$env:SONAR_TOKEN"""
        $analysisArgs += "/d:sonar.host.url=""https://sonarcloud.io"""
        
        # Project information
        $analysisArgs += "/d:sonar.projectName=""CreditTransfer.Modern"""
        $analysisArgs += "/d:sonar.projectVersion=""1.0.${{ github.run_number }}"""
        
        # Source code configuration
        $analysisArgs += "/d:sonar.sources=""src/"""
        $analysisArgs += "/d:sonar.tests=""tests/"""
        $analysisArgs += "/d:sonar.sourceEncoding=""UTF-8"""
        
        # Coverage configuration
        $analysisArgs += "/d:sonar.cs.opencover.reportsPaths=""**/coverage.opencover.xml"""
        $analysisArgs += "/d:sonar.cs.vstest.reportsPaths=""**/*.trx"""
        
        # Language-specific settings
        $analysisArgs += "/d:sonar.dotnet.excludeTestProjects=""true"""
        
        # Quality gate settings
        $analysisArgs += "/d:sonar.qualitygate.wait=""true"""
        
        # Pull request specific settings
        if ("${{ github.event_name }}" -eq "pull_request") {
          $analysisArgs += "/d:sonar.pullrequest.key=""${{ github.event.number }}"""
          $analysisArgs += "/d:sonar.pullrequest.branch=""${{ github.head_ref }}"""
          $analysisArgs += "/d:sonar.pullrequest.base=""${{ github.base_ref }}"""
        } else {
          $analysisArgs += "/d:sonar.branch.name=""${{ github.ref_name }}"""
        }
        
        # Analysis type specific settings
        if ("${{ inputs.analysis_type }}" -eq "security-hotspots") {
          $analysisArgs += "/d:sonar.analysis.mode=""preview"""
        }
        
        # Exclusions for generated code and third-party
        $analysisArgs += "/d:sonar.exclusions=""**/bin/**,**/obj/**,**/*.Designer.cs,**/GlobalAssemblyInfo.cs,**/AssemblyInfo.cs"""
        $analysisArgs += "/d:sonar.test.exclusions=""**/bin/**,**/obj/**"""
        $analysisArgs += "/d:sonar.coverage.exclusions=""**/Migrations/**,**/*Test*.cs,**/*Tests.cs,**/Program.cs,**/Startup.cs"""
        
        Write-Output "Starting SonarCloud analysis with parameters:"
        $analysisArgs | ForEach-Object { Write-Output "  $_" }
        
        dotnet sonarscanner begin @analysisArgs

    - name: "🔄 Restore Dependencies"
      shell: powershell
      run: |
        dotnet restore CreditTransfer.Modern.sln --verbosity minimal

    - name: "🏗️ Build Solution"
      shell: powershell
      run: |
        dotnet build CreditTransfer.Modern.sln `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --no-restore `
          --verbosity minimal `
          /p:Platform="Any CPU"

    - name: "🧪 Run Tests with Coverage"
      shell: powershell
      run: |
        # Create test results directory
        New-Item -ItemType Directory -Force -Path "TestResults"
        
        # Run tests with coverage collection
        dotnet test CreditTransfer.Modern.sln `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --no-build `
          --verbosity minimal `
          --logger "trx;LogFileName=TestResults.trx" `
          --results-directory "TestResults" `
          --collect:"XPlat Code Coverage" `
          --settings "tests/coverlet.runsettings" `
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover `
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeTestAssembly=false

    - name: "📊 Generate Coverage Report"
      shell: powershell
      run: |
        # Find coverage files
        $coverageFiles = Get-ChildItem -Path "TestResults" -Recurse -Filter "coverage.opencover.xml"
        
        if ($coverageFiles.Count -gt 0) {
          Write-Output "Found coverage files:"
          $coverageFiles | ForEach-Object { Write-Output "  $($_.FullName)" }
          
          # Generate consolidated coverage report
          $coveragePaths = ($coverageFiles | ForEach-Object { $_.FullName }) -join ";"
          
          reportgenerator `
            -reports:$coveragePaths `
            -targetdir:"CoverageReport" `
            -reporttypes:"SonarQube;Cobertura;HtmlInline_AzurePipelines" `
            -verbosity:Info
            
          Write-Output "Coverage report generated successfully"
        } else {
          Write-Output "⚠️ No coverage files found"
        }

    - name: "🔍 End SonarCloud Analysis"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        dotnet sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"

    - name: "📋 Upload Coverage Reports"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          CoverageReport/
          TestResults/
        retention-days: 30

    - name: "📊 SonarCloud Quality Gate Check"
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      timeout-minutes: 5

  # Job 2: Code Metrics Analysis
  code-metrics:
    name: "Code Metrics Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "🔧 Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "📊 Install Code Analysis Tools"
      run: |
        dotnet tool install --global Microsoft.CodeAnalysis.Metrics.Tool

    - name: "🔄 Restore Dependencies"
      run: dotnet restore CreditTransfer.Modern.sln --verbosity minimal

    - name: "📈 Generate Code Metrics"
      run: |
        echo "Generating code metrics for all projects..."
        
        # Find all project files
        find . -name "*.csproj" -not -path "*/tests/*" -not -path "*/Test*" | while read -r project; do
          project_name=$(basename "$project" .csproj)
          echo "Analyzing project: $project_name"
          
          # Generate metrics for each project
          timeout 300s dotnet run --project "$project" --verbosity minimal || echo "Metrics generation completed or timed out for $project_name"
        done
        
        echo "Code metrics analysis completed"

    - name: "📊 Complexity Analysis"
      run: |
        echo "=== Code Complexity Analysis ===" | tee complexity-analysis.txt
        echo "Analysis Date: $(date)" | tee -a complexity-analysis.txt
        echo "" | tee -a complexity-analysis.txt
        
        # Analyze C# files for complexity indicators
        echo "## File Count Analysis" | tee -a complexity-analysis.txt
        echo "Total C# files: $(find . -name "*.cs" -not -path "*/bin/*" -not -path "*/obj/*" | wc -l)" | tee -a complexity-analysis.txt
        echo "Source files: $(find ./src -name "*.cs" -not -path "*/bin/*" -not -path "*/obj/*" | wc -l)" | tee -a complexity-analysis.txt
        echo "Test files: $(find ./tests -name "*.cs" -not -path "*/bin/*" -not -path "*/obj/*" 2>/dev/null | wc -l)" | tee -a complexity-analysis.txt
        echo "" | tee -a complexity-analysis.txt
        
        echo "## Lines of Code Analysis" | tee -a complexity-analysis.txt
        total_lines=$(find ./src -name "*.cs" -not -path "*/bin/*" -not -path "*/obj/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        echo "Total lines of code: $total_lines" | tee -a complexity-analysis.txt
        echo "" | tee -a complexity-analysis.txt
        
        echo "## Large File Analysis (>500 lines)" | tee -a complexity-analysis.txt
        find ./src -name "*.cs" -not -path "*/bin/*" -not -path "*/obj/*" -exec wc -l {} + 2>/dev/null | \
          awk '$1 > 500 {print $1 " lines: " $2}' | head -10 | tee -a complexity-analysis.txt || echo "No large files found"
        
        echo "Code complexity analysis completed"

    - name: "📋 Upload Code Metrics"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics
        path: |
          complexity-analysis.txt
        retention-days: 30

  # Job 3: Technical Debt Analysis
  technical-debt:
    name: "Technical Debt Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4

    - name: "🔍 TODO/FIXME Analysis"
      run: |
        echo "=== Technical Debt Analysis ===" | tee technical-debt.txt
        echo "Analysis Date: $(date)" | tee -a technical-debt.txt
        echo "" | tee -a technical-debt.txt
        
        echo "## TODO Items" | tee -a technical-debt.txt
        grep -r "TODO\|FIXME\|HACK\|BUG" --include="*.cs" ./src/ | head -20 | tee -a technical-debt.txt || echo "No TODO items found" | tee -a technical-debt.txt
        echo "" | tee -a technical-debt.txt
        
        echo "## TODO Summary" | tee -a technical-debt.txt
        todo_count=$(grep -r "TODO" --include="*.cs" ./src/ | wc -l || echo "0")
        fixme_count=$(grep -r "FIXME" --include="*.cs" ./src/ | wc -l || echo "0")
        hack_count=$(grep -r "HACK" --include="*.cs" ./src/ | wc -l || echo "0")
        
        echo "TODO items: $todo_count" | tee -a technical-debt.txt
        echo "FIXME items: $fixme_count" | tee -a technical-debt.txt
        echo "HACK items: $hack_count" | tee -a technical-debt.txt
        
        total_debt=$((todo_count + fixme_count + hack_count))
        echo "Total technical debt items: $total_debt" | tee -a technical-debt.txt

    - name: "📋 Upload Technical Debt Analysis"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: technical-debt-analysis
        path: technical-debt.txt
        retention-days: 30

  # Job 4: Quality Summary
  quality-summary:
    name: "Code Quality Summary"
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, code-metrics, technical-debt]
    if: always()

    steps:
    - name: "📥 Download Analysis Results"
      uses: actions/download-artifact@v4
      with:
        path: ./analysis-results

    - name: "📊 Generate Quality Summary"
      run: |
        echo "# 📊 Code Quality Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "| Analysis Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Analysis | ${{ needs.sonarcloud-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code quality and security analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Metrics | ${{ needs.code-metrics.result == 'success' && '✅ Passed' || (needs.code-metrics.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} | Complexity and maintainability metrics |" >> $GITHUB_STEP_SUMMARY
        echo "| Technical Debt | ${{ needs.technical-debt.result == 'success' && '✅ Passed' || (needs.technical-debt.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} | TODO/FIXME analysis |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # SonarCloud Results
        echo "## 🔍 SonarCloud Analysis" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.sonarcloud-analysis.result }}" == "success" ]; then
          echo "✅ **Quality Gate**: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **View Results**: [SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=credittransfer-modern)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Code Coverage**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ **Security Analysis**: Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Quality Gate**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Quality gate conditions not met" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Check SonarCloud for detailed issues" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Code Metrics Summary
        if [ -f "./analysis-results/code-metrics/complexity-analysis.txt" ]; then
          echo "## 📈 Code Metrics Summary" >> $GITHUB_STEP_SUMMARY
          if grep -q "Total lines of code:" "./analysis-results/code-metrics/complexity-analysis.txt"; then
            loc=$(grep "Total lines of code:" "./analysis-results/code-metrics/complexity-analysis.txt" | awk '{print $5}')
            echo "- **Total Lines of Code**: $loc" >> $GITHUB_STEP_SUMMARY
          fi
          if grep -q "Total C# files:" "./analysis-results/code-metrics/complexity-analysis.txt"; then
            files=$(grep "Total C# files:" "./analysis-results/code-metrics/complexity-analysis.txt" | awk '{print $4}')
            echo "- **Total C# Files**: $files" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Technical Debt Summary
        if [ -f "./analysis-results/technical-debt-analysis/technical-debt.txt" ]; then
          echo "## ⚠️ Technical Debt Summary" >> $GITHUB_STEP_SUMMARY
          if grep -q "Total technical debt items:" "./analysis-results/technical-debt-analysis/technical-debt.txt"; then
            debt=$(grep "Total technical debt items:" "./analysis-results/technical-debt-analysis/technical-debt.txt" | awk '{print $5}')
            echo "- **Total Technical Debt Items**: $debt" >> $GITHUB_STEP_SUMMARY
            
            if [ "$debt" -eq 0 ]; then
              echo "- 🎉 **Status**: No technical debt detected!" >> $GITHUB_STEP_SUMMARY
            elif [ "$debt" -le 10 ]; then
              echo "- ✅ **Status**: Low technical debt" >> $GITHUB_STEP_SUMMARY
            elif [ "$debt" -le 25 ]; then
              echo "- ⚠️ **Status**: Medium technical debt" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **Status**: High technical debt - requires attention" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Overall Quality Status
        if [ "${{ needs.sonarcloud-analysis.result }}" == "success" ]; then
          echo "## 🎉 Overall Quality Status: ✅ EXCELLENT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Code quality analysis completed successfully. All quality gates passed." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Overall Quality Status: ❌ NEEDS IMPROVEMENT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Quality issues detected. Please review SonarCloud results and address the findings." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review SonarCloud dashboard for detailed code quality metrics" >> $GITHUB_STEP_SUMMARY
        echo "2. Address any security hotspots or critical issues" >> $GITHUB_STEP_SUMMARY
        echo "3. Improve test coverage where needed (target: >80%)" >> $GITHUB_STEP_SUMMARY
        echo "4. Refactor complex methods to improve maintainability" >> $GITHUB_STEP_SUMMARY
        echo "5. Address technical debt items systematically" >> $GITHUB_STEP_SUMMARY