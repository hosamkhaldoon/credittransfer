name: "Docker - Build & Push"

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean
      scan_images:
        description: 'Run security scans'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Job 1: Build Configuration Matrix
  prepare-matrix:
    name: "Prepare Build Matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      version: ${{ steps.version.outputs.version }}
      should-push: ${{ steps.config.outputs.should-push }}
      
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4

    - name: "üìä Generate Version"
      id: version
      run: |
        BUILD_NUMBER=${GITHUB_RUN_NUMBER}
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          VERSION="pr-${{ github.event.number }}-${BUILD_NUMBER}"
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          VERSION="latest"
          VERSION_TAG="v1.0.${BUILD_NUMBER}"
        else
          VERSION="dev-${BUILD_NUMBER}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version-tag=${VERSION_TAG:-}" >> $GITHUB_OUTPUT
        echo "short-sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

    - name: "‚öôÔ∏è Configure Build"
      id: config
      run: |
        # Determine if we should push images
        SHOULD_PUSH="false"
        if [ "${{ github.event_name }}" == "push" ] || [ "${{ inputs.push_images }}" == "true" ]; then
          SHOULD_PUSH="true"
        fi
        echo "should-push=${SHOULD_PUSH}" >> $GITHUB_OUTPUT

    - name: "üóÇÔ∏è Set Build Matrix"
      id: set-matrix
      run: |
        matrix='{
          "include": [
            {
              "service": "api",
              "name": "credittransfer-api",
              "dockerfile": "src/Services/ApiServices/CreditTransferApi/Dockerfile",
              "context": ".",
              "platforms": "linux/amd64,linux/arm64"
            },
            {
              "service": "wcf", 
              "name": "credittransfer-wcf",
              "dockerfile": "src/Services/WebServices/CreditTransferService/Dockerfile",
              "context": ".",
              "platforms": "linux/amd64"
            },
            {
              "service": "worker",
              "name": "credittransfer-worker", 
              "dockerfile": "src/Services/WorkerServices/CreditTransferWorker/Dockerfile",
              "context": ".",
              "platforms": "linux/amd64,linux/arm64"
            },
            {
              "service": "web",
              "name": "credittransfer-web",
              "dockerfile": "src/Services/WebServices/CreditTransferWeb/Dockerfile", 
              "context": ".",
              "platforms": "linux/amd64,linux/arm64"
            }
          ]
        }'
        echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  # Job 2: Build Docker Images
  build-images:
    name: "Build ${{ matrix.name }}"
    runs-on: ubuntu-latest
    needs: prepare-matrix
    timeout-minutes: 30
    
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4

    - name: "üîß Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ matrix.platforms }}
        driver-opts: |
          network=host

    - name: "üîë Login to Container Registry"
      if: needs.prepare-matrix.outputs.should-push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: "üè∑Ô∏è Generate Image Tags"
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.prepare-matrix.outputs.version }}
        labels: |
          org.opencontainers.image.title=${{ matrix.name }}
          org.opencontainers.image.description=CreditTransfer.Modern ${{ matrix.service }} service
          org.opencontainers.image.vendor=Virgin Group
          org.opencontainers.image.version=${{ needs.prepare-matrix.outputs.version }}

    - name: "üèóÔ∏è Build Docker Image"
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        platforms: ${{ matrix.platforms }}
        push: ${{ needs.prepare-matrix.outputs.should-push == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ needs.prepare-matrix.outputs.version }}
        outputs: |
          type=image,name=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.name }},push=${{ needs.prepare-matrix.outputs.should-push == 'true' }}
          type=docker,dest=/tmp/${{ matrix.name }}.tar

    - name: "üì§ Upload Image Artifact"
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ matrix.service }}
        path: /tmp/${{ matrix.name }}.tar
        retention-days: 3

    - name: "üîç Scan Image with Trivy"
      if: inputs.scan_images == 'true' || github.event_name == 'push'
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/${{ matrix.name }}.tar
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: "üìã Upload Trivy Results to GitHub Security"
      if: (inputs.scan_images == 'true' || github.event_name == 'push') && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
        category: 'docker-${{ matrix.service }}'

    - name: "üìä Generate Image Summary"
      if: always()
      run: |
        echo "## üê≥ Docker Image: ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.prepare-matrix.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: ${{ matrix.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: " >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | while read -r tag; do
          echo "  - \`${tag}\`" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Image size information
        if [ -f "/tmp/${{ matrix.name }}.tar" ]; then
          IMAGE_SIZE=$(ls -lh /tmp/${{ matrix.name }}.tar | awk '{print $5}')
          echo "- **Image Size**: ${IMAGE_SIZE}" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security scan results
        if [ -f "trivy-${{ matrix.service }}.sarif" ]; then
          echo "- **Security Scan**: ‚úÖ Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Security Scan**: ‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
        fi

  # Job 3: Multi-Architecture Test
  test-images:
    name: "Test Docker Images"
    runs-on: ubuntu-latest
    needs: [prepare-matrix, build-images]
    if: always() && needs.build-images.result == 'success'
    timeout-minutes: 15

    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false

    steps:
    - name: "üì• Download Image Artifact"
      uses: actions/download-artifact@v4
      with:
        name: docker-image-${{ matrix.service }}
        path: /tmp

    - name: "üîß Load Docker Image"
      run: |
        docker load -i /tmp/${{ matrix.name }}.tar
        docker images | grep ${{ matrix.name }}

    - name: "üß™ Test Container Startup"
      timeout-minutes: 2
      run: |
        # Get the image name and tag
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep ${{ matrix.name }} | head -n1)
        echo "Testing image: ${IMAGE_NAME}"
        
        # Start container in background
        CONTAINER_ID=$(docker run -d --name test-${{ matrix.service }} ${IMAGE_NAME})
        echo "Started container: ${CONTAINER_ID}"
        
        # Wait for container to start
        sleep 5
        
        # Check container status
        docker ps -a
        
        # Check container logs
        echo "=== Container Logs ==="
        docker logs test-${{ matrix.service }} || true
        
        # Cleanup
        docker stop test-${{ matrix.service }} || true
        docker rm test-${{ matrix.service }} || true

    - name: "üîç Inspect Image Details"
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep ${{ matrix.name }} | head -n1)
        echo "=== Image Inspection ==="
        docker inspect ${IMAGE_NAME} | jq '.[0] | {
          "Architecture": .Architecture,
          "Os": .Os,
          "Size": .Size,
          "Created": .Created,
          "Config": {
            "ExposedPorts": .Config.ExposedPorts,
            "Env": .Config.Env,
            "WorkingDir": .Config.WorkingDir
          }
        }'

  # Job 4: Cleanup and Summary
  build-summary:
    name: "Docker Build Summary"
    runs-on: ubuntu-latest
    needs: [prepare-matrix, build-images, test-images]
    if: always()
    
    steps:
    - name: "üìä Generate Docker Build Summary"
      run: |
        echo "# üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìã Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.prepare-matrix.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Push Enabled**: ${{ needs.prepare-matrix.outputs.should-push }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üèóÔ∏è Build Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Build**: ${{ needs.build-images.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Testing**: ${{ needs.test-images.result == 'success' && '‚úÖ Success' || (needs.test-images.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üì¶ Built Images" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Image | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| API | \`${{ env.REGISTRY }}/${{ github.repository_owner }}/credittransfer-api:${{ needs.prepare-matrix.outputs.version }}\` | ${{ needs.build-images.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| WCF | \`${{ env.REGISTRY }}/${{ github.repository_owner }}/credittransfer-wcf:${{ needs.prepare-matrix.outputs.version }}\` | ${{ needs.build-images.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Worker | \`${{ env.REGISTRY }}/${{ github.repository_owner }}/credittransfer-worker:${{ needs.prepare-matrix.outputs.version }}\` | ${{ needs.build-images.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web | \`${{ env.REGISTRY }}/${{ github.repository_owner }}/credittransfer-web:${{ needs.prepare-matrix.outputs.version }}\` | ${{ needs.build-images.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.prepare-matrix.outputs.should-push }}" == "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üöÄ Images Available For Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Docker images have been pushed to the registry and are ready for deployment." >> $GITHUB_STEP_SUMMARY
        fi

  # Job 5: Registry Cleanup (Optional)
  cleanup-registry:
    name: "Registry Cleanup"
    runs-on: ubuntu-latest
    needs: [prepare-matrix, build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      packages: write
      
    steps:
    - name: "üßπ Cleanup Old Images"
      run: |
        echo "Registry cleanup would be implemented here"
        # This would use GitHub API to cleanup old images
        # Keep latest 10 versions, remove untagged images older than 7 days
        echo "Future: Implement registry cleanup logic"