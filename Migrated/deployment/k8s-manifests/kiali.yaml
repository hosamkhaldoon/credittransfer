apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: credittransfer
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v2.8.0"
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/part-of: "kiali"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: credittransfer
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v2.8.0"
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/part-of: "kiali"
data:
  config.yaml: |
    additional_display_details:
    - annotation: kiali.io/api-spec
      icon_annotation: kiali.io/api-type
      title: API Documentation
    auth:
      openid: {}
      openshift:
        client_id_prefix: kiali
      strategy: anonymous
    clustering:
      autodetect_secrets:
        enabled: true
        label: kiali.io/multiCluster=true
      clusters: []
    deployment:
      additional_service_yaml: {}
      affinity:
        node: {}
        pod: {}
        pod_anti: {}
      cluster_wide_access: true
      configmap_annotations: {}
      custom_envs: []
      custom_secrets: []
      dns:
        config: {}
        policy: ""
      host_aliases: []
      hpa:
        api_version: autoscaling/v2
        spec: {}
      image_digest: ""
      image_name: quay.io/kiali/kiali
      image_pull_policy: IfNotPresent
      image_pull_secrets: []
      image_version: v2.8
      ingress:
        additional_labels: {}
        class_name: nginx
        override_yaml:
          metadata: {}
      ingress_enabled: false
      instance_name: kiali
      logger:
        log_format: text
        log_level: info
        sampler_rate: "1"
        time_field_format: 2006-01-02T15:04:05Z07:00
      namespace: credittransfer
      node_selector: {}
      pod_annotations: {}
      pod_labels:
        sidecar.istio.io/inject: "false"
      priority_class_name: ""
      probes:
        liveness:
          initial_delay_seconds: 5
          period_seconds: 30
        readiness:
          initial_delay_seconds: 5
          period_seconds: 30
        startup:
          failure_threshold: 6
          initial_delay_seconds: 30
          period_seconds: 10
      remote_cluster_resources_only: false
      replicas: 1
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 64Mi
      secret_name: kiali
      security_context: {}
      service_annotations: {}
      service_type: ""
      tolerations: []
      topology_spread_constraints: []
      version_label: v2.8.0
      view_only_mode: false
    external_services:
      custom_dashboards:
        enabled: true
      grafana:
        enabled: true
        in_cluster_url: "http://grafana.credittransfer.svc.cluster.local:3000"
        url: "http://grafana.credittransfer.svc.cluster.local:3000"
      istio:
        root_namespace: credittransfer
      prometheus:
        url: "http://prometheus.credittransfer.svc.cluster.local:9093"
      tracing:
        enabled: true
        in_cluster_url: "http://jaeger.credittransfer.svc.cluster.local:16686"
        url: "http://jaeger.credittransfer.svc.cluster.local:16686"
    identity:
      cert_file: ""
      private_key_file: ""
    istio_namespace: credittransfer
    kiali_feature_flags:
      disabled_features: []
      validations:
        ignore:
        - KIA1301
    login_token:
      signing_key: CHANGEME00000000
    server:
      observability:
        metrics:
          enabled: true
          port: 9090
      port: 20001
      web_root: /kiali
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v2.8.0"
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/part-of: "kiali"
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - endpoints
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups: [""]
  resources:
  - pods/portforward
  verbs:
  - create
  - post
- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups: ["networking.istio.io"]
  resources:
  - destinationrules
  - envoyfilters
  - gateways
  - serviceentries
  - sidecars
  - virtualservices
  - workloadentries
  - workloadgroups
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["security.istio.io"]
  resources:
  - authorizationpolicies
  - peerauthentications
  - requestauthentications
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["telemetry.istio.io"]
  resources:
  - telemetries
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["admissionregistration.k8s.io"]
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
- apiGroups: ["extensions.istio.io"]
  resources:
  - wasmplugins
  verbs:
  - get
  - list
  - watch
- apiGroups: ["install.istio.io"]
  resources:
  - istiooperators
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v2.8.0"
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/part-of: "kiali"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
- kind: ServiceAccount
  name: kiali
  namespace: credittransfer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: credittransfer
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v2.8.0"
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/part-of: "kiali"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
  template:
    metadata:
      labels:
        app: kiali
        version: "v2.8.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        kiali.io/runtimes: go,kiali
    spec:
      serviceAccountName: kiali
      containers:
      - name: kiali
        image: quay.io/kiali/kiali:v2.8
        imagePullPolicy: IfNotPresent
        command:
        - "/opt/kiali/kiali"
        - "-config"
        - "/kiali-configuration/config.yaml"
        ports:
        - name: api-port
          containerPort: 20001
          protocol: TCP
        - name: http-metrics
          containerPort: 9090
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        startupProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 6
        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "text"
        - name: LOG_TIME_FIELD_FORMAT
          value: "2006-01-02T15:04:05Z07:00"
        - name: LOG_SAMPLER_RATE
          value: "1"
        volumeMounts:
        - name: kiali-configuration
          mountPath: "/kiali-configuration"
        - name: kiali-cert
          mountPath: "/kiali-cert"
        - name: kiali-secret
          mountPath: "/kiali-secret"
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            memory: 1Gi
      volumes:
      - name: kiali-configuration
        configMap:
          name: kiali
      - name: kiali-cert
        secret:
          secretName: istio.kiali-service-account
          optional: true
      - name: kiali-secret
        secret:
          secretName: kiali
          optional: true
---
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: credittransfer
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v2.8.0"
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/part-of: "kiali"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  ports:
  - name: http-kiali
    protocol: TCP
    port: 20001
    targetPort: 20001
  - name: http-metrics
    protocol: TCP
    port: 9090
    targetPort: 9090
  selector:
    app: kiali 