# Generated by Cursor AI Assistant
name: "🐳 Matrix Service Build"
description: "Build and optionally push Docker images for services using matrix strategy"

inputs:
  service-name:
    description: 'Service name (wcf, api, worker, web)'
    required: true
  service-display-name:
    description: 'Human-readable service name'
    required: true
  dockerfile-path:
    description: 'Path to Dockerfile'
    required: true
  context-path:
    description: 'Build context path'
    required: false
    default: './Migrated'
  image-name:
    description: 'Docker image name'
    required: true
  registry:
    description: 'Docker registry'
    required: false
    default: 'docker.io'
  push-image:
    description: 'Whether to push the image'
    required: false
    default: 'false'
  version-tag:
    description: 'Version tag for the image'
    required: false
    default: 'latest'
  registry-username:
    description: 'Registry username for push'
    required: false
  registry-password:
    description: 'Registry password for push'
    required: false

outputs:
  image-tag:
    description: 'Full image tag'
    value: ${{ steps.build.outputs.image-tag }}
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  build-success:
    description: 'Whether build was successful'
    value: ${{ steps.build.outputs.build-success }}

runs:
  using: composite
  steps:
    - name: "🔍 Validate Service Configuration"
      shell: bash
      run: |
        echo "🔍 Validating ${{ inputs.service-display-name }} configuration..."
        
        # Check if Dockerfile exists
        if [ ! -f "${{ inputs.dockerfile-path }}" ]; then
          echo "❌ Dockerfile not found: ${{ inputs.dockerfile-path }}"
          echo "🔍 Available files in directory:"
          ls -la $(dirname "${{ inputs.dockerfile-path }}") || true
          exit 1
        fi
        
        # Check if context exists
        if [ ! -d "${{ inputs.context-path }}" ]; then
          echo "❌ Build context not found: ${{ inputs.context-path }}"
          exit 1
        fi
        
        echo "✅ Configuration valid for ${{ inputs.service-display-name }}"
        echo "📁 Dockerfile: ${{ inputs.dockerfile-path }}"
        echo "📁 Context: ${{ inputs.context-path }}"
        echo "🏷️ Image: ${{ inputs.image-name }}:${{ inputs.version-tag }}"

    - name: "🐳 Setup Docker Buildx"
      uses: docker/setup-buildx-action@v3

    - name: "🔐 Login to Registry"
      if: inputs.push-image == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: "🏷️ Extract Metadata"
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=raw,value=${{ inputs.version-tag }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: "🔨 Build and Push ${{ inputs.service-display-name }}"
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context-path }}
        file: ${{ inputs.dockerfile-path }}
        push: ${{ inputs.push-image }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
      continue-on-error: false

    - name: "📊 Build Results"
      shell: bash
      run: |
        if [ "${{ steps.build.outcome }}" = "success" ]; then
          echo "build-success=true" >> $GITHUB_OUTPUT
          echo "image-tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
          
          echo "✅ ${{ inputs.service-display-name }} build successful!"
          echo "🏷️ Image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
          
          if [ "${{ inputs.push-image }}" = "true" ]; then
            echo "📤 Image pushed to registry"
            echo "🔍 Digest: ${{ steps.build.outputs.digest }}"
          else
            echo "📦 Image built locally (not pushed)"
          fi
        else
          echo "build-success=false" >> $GITHUB_OUTPUT
          echo "❌ ${{ inputs.service-display-name }} build failed!"
          exit 1
        fi

    - name: "🔍 Image Inspection"
      if: steps.build.outputs.build-success == 'true'
      shell: bash
      run: |
        echo "🔍 Inspecting built image..."
        IMAGE_TAG="${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        
        # Get image info
        docker image inspect "$IMAGE_TAG" --format='Size: {{.Size}} bytes' || true
        docker image inspect "$IMAGE_TAG" --format='Created: {{.Created}}' || true
        docker image inspect "$IMAGE_TAG" --format='Architecture: {{.Architecture}}' || true
        
        echo "📋 Image layers:"
        docker history "$IMAGE_TAG" --no-trunc || true

    - name: "📊 Update Build Summary"
      shell: bash
      run: |
        if [ "${{ steps.build.outputs.build-success }}" = "true" ]; then
          echo "| ${{ inputs.service-display-name }} | \`${{ fromJSON(steps.meta.outputs.json).tags[0] }}\` | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ${{ inputs.service-display-name }} | \`${{ inputs.image-name }}:${{ inputs.version-tag }}\` | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi