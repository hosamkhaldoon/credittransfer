# Code generated by Cursor
# Generated by Cursor AI Assistant
name: "üîÑ Shared: Service Matrix Operations"

on:
  workflow_call:
    inputs:
      operation:
        description: 'Operation to perform (build, deploy, test, health-check)'
        required: true
        type: string
      services:
        description: 'JSON array of services to process'
        required: false
        default: '["api", "wcf", "worker", "web"]'
        type: string
      environment:
        description: 'Target environment (dev, staging, prod)'
        required: false
        default: 'dev'
        type: string
      registry:
        description: 'Docker registry'
        required: false
        default: 'docker.io'
        type: string
      push-images:
        description: 'Whether to push built images'
        required: false
        default: false
        type: boolean
      version-tag:
        description: 'Version tag for images'
        required: false
        default: 'latest'
        type: string
      working-directory:
        description: 'Working directory'
        required: false
        default: './Migrated'
        type: string
    secrets:
      registry-username:
        description: 'Registry username'
        required: false
      registry-password:
        description: 'Registry password'
        required: false
      deploy-token:
        description: 'Deployment token'
        required: false

jobs:
  prepare-matrix:
    name: "üìã Prepare Service Matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      service-count: ${{ steps.matrix.outputs.service-count }}
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4

    - name: "üìã Generate Service Matrix"
      id: matrix
      run: |
        echo "üìã Generating service matrix for operation: ${{ inputs.operation }}"
        
        # Parse input services or use default
        SERVICES='${{ inputs.services }}'
        if [ -z "$SERVICES" ] || [ "$SERVICES" = "null" ]; then
          SERVICES='["wcf", "api"]'
        fi
        echo "üîç Input services: $SERVICES"
        
        # Define service configurations (Updated to match actual project structure)
        cat > service-config.json << 'EOF'
        {
          "api": {
            "name": "api",
            "display_name": "REST API",
            "dockerfile": "src/Services/ApiServices/CreditTransferApi/Dockerfile",
            "image": "credittransfer-api",
            "port": 8080,
            "health_path": "/health",
            "deploy_service": "credittransfer-api"
          },
          "wcf": {
            "name": "wcf",
            "display_name": "WCF Service",
            "dockerfile": "src/Services/WebServices/CreditTransferService/Dockerfile",
            "image": "credittransfer-wcf",
            "port": 80,
            "health_path": "/health",
            "deploy_service": "credittransfer-wcf"
          },
          "worker": {
            "name": "worker",
            "display_name": "Worker Service",
            "dockerfile": "src/Services/WorkerServices/CreditTransferWorker/Dockerfile",
            "image": "credittransfer-worker",
            "port": 8081,
            "health_path": "/health",
            "deploy_service": "credittransfer-worker"
          },
          "web": {
            "name": "web",
            "display_name": "Web Application",
            "dockerfile": "src/Services/WebServices/CreditTransferWeb/Dockerfile",
            "image": "credittransfer-web",
            "port": 80,
            "health_path": "/health",
            "deploy_service": "credittransfer-web"
          }
        }
        EOF
        
        # Generate matrix based on requested services and operation
        echo "üîß Building matrix for services: $(echo "$SERVICES" | jq -r '.[]' | tr '\n' ' ')"
        
        MATRIX_INCLUDE='[]'
        SERVICE_COUNT=0
        
        for SERVICE in $(echo "$SERVICES" | jq -r '.[]'); do
          # Check if service config exists
          if jq -e ".${SERVICE}" service-config.json > /dev/null; then
            SERVICE_CONFIG=$(jq ".${SERVICE}" service-config.json)
            
            # Check if dockerfile exists (for build operations)
            DOCKERFILE=$(echo "$SERVICE_CONFIG" | jq -r '.dockerfile')
            FULL_DOCKERFILE_PATH="${{ inputs.working-directory }}/$DOCKERFILE"
            
            if [ "${{ inputs.operation }}" = "build" ] && [ ! -f "$FULL_DOCKERFILE_PATH" ]; then
              echo "‚ö†Ô∏è Skipping $SERVICE - Dockerfile not found: $FULL_DOCKERFILE_PATH"
              continue
            fi
            
            # Add to matrix
            MATRIX_ITEM=$(echo "$SERVICE_CONFIG" | jq ". + {
              \"environment\": \"${{ inputs.environment }}\",
              \"registry\": \"${{ inputs.registry }}\",
              \"version_tag\": \"${{ inputs.version-tag }}\",
              \"working_directory\": \"${{ inputs.working-directory }}\"
            }")
            
            MATRIX_INCLUDE=$(echo "$MATRIX_INCLUDE" | jq ". + [$MATRIX_ITEM]")
            SERVICE_COUNT=$((SERVICE_COUNT + 1))
            
            echo "‚úÖ Added $SERVICE to matrix"
          else
            echo "‚ö†Ô∏è Unknown service: $SERVICE"
          fi
        done
        
        MATRIX_JSON=$(echo '{}' | jq ".include = $MATRIX_INCLUDE")
        
        echo "üìä Final matrix (${SERVICE_COUNT} services):"
        echo "$MATRIX_JSON" | jq '.'
        
        # Compact the JSON and properly escape for GitHub Actions output
        MATRIX_JSON_COMPACT=$(echo "$MATRIX_JSON" | jq -c '.')
        echo "matrix=$MATRIX_JSON_COMPACT" >> $GITHUB_OUTPUT
        echo "service-count=$SERVICE_COUNT" >> $GITHUB_OUTPUT
        
        # Cleanup
        rm -f service-config.json

  execute-operation:
    name: "${{ inputs.operation == 'build' && 'üî®' || inputs.operation == 'deploy' && 'üöÄ' || inputs.operation == 'test' && 'üß™' || 'üè•' }} ${{ matrix.display_name }}"
    runs-on: ubuntu-latest
    needs: prepare-matrix
    if: needs.prepare-matrix.outputs.service-count > 0
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # BUILD OPERATION
    - name: "üî® Build Service"
      if: inputs.operation == 'build'
      uses: ./.github/actions/matrix-service-build
      with:
        service-name: ${{ matrix.name }}
        service-display-name: ${{ matrix.display_name }}
        dockerfile-path: ${{ matrix.working_directory }}/${{ matrix.dockerfile }}
        context-path: ${{ matrix.working_directory }}
        image-name: ${{ matrix.image }}
        registry: ${{ matrix.registry }}
        push-image: ${{ inputs.push-images }}
        version-tag: ${{ matrix.version_tag }}
        registry-username: ${{ secrets.registry-username }}
        registry-password: ${{ secrets.registry-password }}

    # DEPLOY OPERATION
    - name: "üöÄ Deploy Service"
      if: inputs.operation == 'deploy'
      run: |
        echo "üöÄ Deploying ${{ matrix.display_name }} to ${{ matrix.environment }}"
        echo "üê≥ Image: ${{ matrix.registry }}/${{ matrix.image }}:${{ matrix.version_tag }}"
        echo "üéØ Service: ${{ matrix.deploy_service }}"
        
        # Deployment logic would go here
        # This could call kubectl, docker-compose, or other deployment tools
        echo "‚úÖ ${{ matrix.display_name }} deployment completed"

    # TEST OPERATION
    - name: "üß™ Test Service"
      if: inputs.operation == 'test'
      run: |
        echo "üß™ Testing ${{ matrix.display_name }}"
        echo "üåê Port: ${{ matrix.port }}"
        echo "üè• Health endpoint: ${{ matrix.health_path }}"
        
        # Test logic would go here
        # This could include unit tests, integration tests, smoke tests
        echo "‚úÖ ${{ matrix.display_name }} tests passed"

    # HEALTH CHECK OPERATION
    - name: "üè• Health Check Service"
      if: inputs.operation == 'health-check'
      run: |
        echo "üè• Checking health of ${{ matrix.display_name }}"
        
        SERVICE_URL="http://localhost:${{ matrix.port }}${{ matrix.health_path }}"
        echo "üîç Checking: $SERVICE_URL"
        
        # Health check logic would go here
        # curl -f "$SERVICE_URL" || exit 1
        echo "‚úÖ ${{ matrix.display_name }} is healthy"

  summary:
    name: "üìä Operation Summary"
    runs-on: ubuntu-latest
    needs: [prepare-matrix, execute-operation]
    if: always()
    
    steps:
    - name: "üìä Generate Summary"
      run: |
        echo "## üîÑ Service Matrix Operation: ${{ inputs.operation }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Operation Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Operation**: ${{ inputs.operation }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Services Processed**: ${{ needs.prepare-matrix.outputs.service-count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Tag**: ${{ inputs.version-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìä Service Results" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Results will be populated by individual service jobs
        
        if [ "${{ needs.execute-operation.result }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **All services processed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Some services encountered issues. Check individual job logs for details.**" >> $GITHUB_STEP_SUMMARY
        fi