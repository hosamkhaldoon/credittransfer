# Generated by Cursor - Shared Security Testing Workflow
# Reusable workflow for security testing and vulnerability scanning

name: "🔒 Shared Security Testing"

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Working directory for the project'
        required: false
        default: './'
        type: string
      solution-file:
        description: 'Solution file to analyze'
        required: false
        default: '*.sln'
        type: string
      configuration:
        description: 'Build configuration'
        required: false
        default: 'Release'
        type: string
      dotnet-version:
        description: '.NET version to use'
        required: false
        default: '9.0.x'
        type: string
      security-test-filter:
        description: 'Security test filter expression'
        required: false
        default: 'Category=Security'
        type: string
      timeout-minutes:
        description: 'Job timeout in minutes'
        required: false
        default: 45
        type: number
      upload-artifacts:
        description: 'Whether to upload security artifacts'
        required: false
        default: true
        type: boolean
      artifact-retention-days:
        description: 'Artifact retention period in days'
        required: false
        default: 90
        type: number
      fail-on-vulnerabilities:
        description: 'Whether to fail on found vulnerabilities'
        required: false
        default: true
        type: boolean
      run-dependency-scan:
        description: 'Whether to run dependency vulnerability scan'
        required: false
        default: true
        type: boolean
      run-code-analysis:
        description: 'Whether to run static code analysis'
        required: false
        default: true
        type: boolean
      run-security-tests:
        description: 'Whether to run security unit tests'
        required: false
        default: true
        type: boolean
      project-name:
        description: 'Project name for security scan reports'
        required: false
        default: ''
        type: string
    outputs:
      security-result:
        description: 'Overall security test result'
        value: ${{ jobs.security-tests.outputs.security-result }}
      vulnerabilities-found:
        description: 'Number of vulnerabilities found'
        value: ${{ jobs.security-tests.outputs.vulnerabilities-found }}
      dependency-scan-result:
        description: 'Dependency scan result'
        value: ${{ jobs.security-tests.outputs.dependency-scan-result }}
      code-analysis-result:
        description: 'Code analysis result'
        value: ${{ jobs.security-tests.outputs.code-analysis-result }}
      security-tests-result:
        description: 'Security tests result'
        value: ${{ jobs.security-tests.outputs.security-tests-result }}

jobs:
  security-tests:
    name: "🔒 Security Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    outputs:
      security-result: ${{ steps.overall-result.outputs.security-result }}
      vulnerabilities-found: ${{ steps.overall-result.outputs.vulnerabilities-found }}
      dependency-scan-result: ${{ steps.dependency-scan.outputs.result }}
      code-analysis-result: ${{ steps.code-analysis.outputs.result }}
      security-tests-result: ${{ steps.security-tests.outputs.result }}
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🔧 Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: "📦 Restore Dependencies"
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📦 Restoring NuGet packages..."
        dotnet restore ${{ inputs.solution-file }} --verbosity minimal

    - name: "🔨 Build Solution"
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔨 Building solution..."
        dotnet build ${{ inputs.solution-file }} \
          --configuration ${{ inputs.configuration }} \
          --no-restore \
          --verbosity minimal

    - name: "🔍 Dependency Vulnerability Scan"
      id: dependency-scan
      if: inputs.run-dependency-scan
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Scanning for dependency vulnerabilities..."
        mkdir -p security-reports
        
        # Create audit report
        AUDIT_EXIT_CODE=0
        dotnet list package --vulnerable --include-transitive \
          --output-format json > security-reports/vulnerability-audit.json || AUDIT_EXIT_CODE=$?
        
        # Check for vulnerabilities in the JSON output
        VULNERABILITIES_COUNT=0
        if [ -f "security-reports/vulnerability-audit.json" ]; then
          # Count projects with vulnerabilities
          VULNERABILITIES_COUNT=$(jq '[.projects[]? | select(.frameworks[]?.topLevelPackages[]?.vulnerabilities? or .frameworks[]?.transitivePackages[]?.vulnerabilities?) | length] | add // 0' security-reports/vulnerability-audit.json 2>/dev/null || echo "0")
          
          echo "📊 Vulnerability scan completed"
          echo "Found vulnerabilities in $VULNERABILITIES_COUNT packages"
          
          # Display summary
          if [ "$VULNERABILITIES_COUNT" -gt 0 ]; then
            echo "⚠️ Vulnerabilities detected:"
            jq -r '.projects[]?.frameworks[]? | .topLevelPackages[]?, .transitivePackages[]? | select(.vulnerabilities?) | "- \(.id): \(.vulnerabilities | length) vulnerabilities"' security-reports/vulnerability-audit.json 2>/dev/null || echo "Error parsing vulnerabilities"
          else
            echo "✅ No known vulnerabilities found in dependencies"
          fi
        fi
        
        # Set result
        if [ "$VULNERABILITIES_COUNT" -gt 0 ]; then
          echo "result=vulnerabilities-found" >> $GITHUB_OUTPUT
          echo "count=$VULNERABILITIES_COUNT" >> $GITHUB_OUTPUT
        else
          echo "result=clean" >> $GITHUB_OUTPUT
          echo "count=0" >> $GITHUB_OUTPUT
        fi

    - name: "📋 Static Code Analysis"
      id: code-analysis
      if: inputs.run-code-analysis
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📋 Running static code analysis..."
        
        # Run dotnet format with security analyzers
        ANALYSIS_EXIT_CODE=0
        dotnet format --verify-no-changes --verbosity diagnostic \
          --report security-reports/code-analysis.json || ANALYSIS_EXIT_CODE=$?
        
        # Install security code scan tool
        echo "🔧 Installing security analyzers..."
        dotnet add package Microsoft.CodeAnalysis.NetAnalyzers --version 8.0.0 || echo "⚠️ Failed to add analyzers"
        
        # Run security-focused build with analyzers
        echo "🔍 Running security analysis build..."
        dotnet build ${{ inputs.solution-file }} \
          --configuration ${{ inputs.configuration }} \
          --verbosity normal \
          --property WarningsAsErrors="" \
          --property TreatWarningsAsErrors=false \
          > security-reports/security-analysis.log 2>&1 || echo "⚠️ Analysis completed with warnings"
        
        # Check for security warnings
        SECURITY_WARNINGS=$(grep -i "security\|vulnerable\|unsafe" security-reports/security-analysis.log | wc -l || echo "0")
        
        echo "📊 Static analysis completed"
        echo "Security-related warnings: $SECURITY_WARNINGS"
        
        if [ "$SECURITY_WARNINGS" -gt 0 ]; then
          echo "result=warnings-found" >> $GITHUB_OUTPUT
          echo "⚠️ Security warnings detected in code analysis"
        else
          echo "result=clean" >> $GITHUB_OUTPUT
          echo "✅ No security warnings found"
        fi

    - name: "🧪 Execute Security Tests"
      id: security-tests
      if: inputs.run-security-tests
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🧪 Running security tests..."
        mkdir -p security-reports/test-results
        
        # Run security-specific tests
        SECURITY_TEST_EXIT_CODE=0
        dotnet test ${{ inputs.solution-file }} \
          --configuration ${{ inputs.configuration }} \
          --no-build \
          --logger "trx;LogFileName=security-tests.trx" \
          --logger "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true" \
          --results-directory ./security-reports/test-results \
          --filter "${{ inputs.security-test-filter }}" \
          --verbosity normal || SECURITY_TEST_EXIT_CODE=$?
        
        # Extract test statistics
        TESTS_TOTAL=0
        TESTS_PASSED=0
        TESTS_FAILED=0
        
        for trx_file in security-reports/test-results/**/*.trx; do
          if [ -f "$trx_file" ]; then
            TOTAL=$(grep -o 'total="[0-9]*"' "$trx_file" | cut -d'"' -f2 || echo "0")
            PASSED=$(grep -o 'passed="[0-9]*"' "$trx_file" | cut -d'"' -f2 || echo "0")
            FAILED=$(grep -o 'failed="[0-9]*"' "$trx_file" | cut -d'"' -f2 || echo "0")
            
            TESTS_TOTAL=$((TESTS_TOTAL + TOTAL))
            TESTS_PASSED=$((TESTS_PASSED + PASSED))
            TESTS_FAILED=$((TESTS_FAILED + FAILED))
          fi
        done
        
        echo "📊 Security test summary:"
        echo "  Total: $TESTS_TOTAL"
        echo "  Passed: $TESTS_PASSED"
        echo "  Failed: $TESTS_FAILED"
        
        # Set result
        if [ $SECURITY_TEST_EXIT_CODE -eq 0 ] && [ $TESTS_FAILED -eq 0 ]; then
          echo "result=passed" >> $GITHUB_OUTPUT
          echo "✅ All security tests passed"
        else
          echo "result=failed" >> $GITHUB_OUTPUT
          echo "❌ Security tests failed or had errors"
        fi
        
        echo "tests-total=$TESTS_TOTAL" >> $GITHUB_OUTPUT
        echo "tests-passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
        echo "tests-failed=$TESTS_FAILED" >> $GITHUB_OUTPUT

    - name: "🔐 OWASP Dependency Check"
      if: inputs.run-dependency-scan
      run: |
        echo "🔐 Running OWASP Dependency Check..."
        
        # Download and run OWASP Dependency Check
        wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.0.4-release.zip
        unzip -q dependency-check-10.0.4-release.zip
        
        # Determine project name
        if [ -n "${{ inputs.project-name }}" ]; then
          PROJECT_NAME="${{ inputs.project-name }}"
        else
          PROJECT_NAME="Security Scan - $(basename $(pwd))"
        fi
        
        echo "🔍 Running OWASP scan for project: $PROJECT_NAME"
        
        # Run dependency check
        ./dependency-check/bin/dependency-check.sh \
          --project "$PROJECT_NAME" \
          --scan "${{ inputs.working-directory }}" \
          --format ALL \
          --out security-reports/owasp-report \
          --suppression dependency-check-suppressions.xml 2>/dev/null || {
            echo "⚠️ OWASP Dependency Check completed with warnings"
          }
        
        # Check for high/critical vulnerabilities
        if [ -f "security-reports/owasp-report/dependency-check-report.json" ]; then
          HIGH_CRITICAL=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH" or .severity == "CRITICAL")] | length' security-reports/owasp-report/dependency-check-report.json 2>/dev/null || echo "0")
          echo "🔍 OWASP scan found $HIGH_CRITICAL high/critical vulnerabilities"
        fi

    - name: "📊 Overall Security Result"
      id: overall-result
      if: always()
      run: |
        echo "📊 Calculating overall security result..."
        
        # Collect results
        DEPENDENCY_RESULT="${{ steps.dependency-scan.outputs.result }}"
        CODE_ANALYSIS_RESULT="${{ steps.code-analysis.outputs.result }}"
        SECURITY_TESTS_RESULT="${{ steps.security-tests.outputs.result }}"
        
        VULNERABILITIES_COUNT="${{ steps.dependency-scan.outputs.count || '0' }}"
        
        echo "🔍 Component results:"
        echo "  Dependency scan: $DEPENDENCY_RESULT"
        echo "  Code analysis: $CODE_ANALYSIS_RESULT"
        echo "  Security tests: $SECURITY_TESTS_RESULT"
        
        # Determine overall result
        OVERALL_RESULT="success"
        SHOULD_FAIL=false
        
        if [ "$DEPENDENCY_RESULT" = "vulnerabilities-found" ]; then
          OVERALL_RESULT="vulnerabilities-found"
          if [ "${{ inputs.fail-on-vulnerabilities }}" = "true" ]; then
            SHOULD_FAIL=true
          fi
        fi
        
        if [ "$CODE_ANALYSIS_RESULT" = "warnings-found" ]; then
          OVERALL_RESULT="warnings-found"
        fi
        
        if [ "$SECURITY_TESTS_RESULT" = "failed" ]; then
          OVERALL_RESULT="tests-failed"
          SHOULD_FAIL=true
        fi
        
        # Set outputs
        echo "security-result=$OVERALL_RESULT" >> $GITHUB_OUTPUT
        echo "vulnerabilities-found=$VULNERABILITIES_COUNT" >> $GITHUB_OUTPUT
        
        # Summary
        if [ "$OVERALL_RESULT" = "success" ]; then
          echo "✅ Security analysis passed - no significant issues found"
        else
          echo "⚠️ Security analysis found issues: $OVERALL_RESULT"
          if [ "$SHOULD_FAIL" = "true" ]; then
            echo "🚨 Failing workflow due to security issues"
            exit 1
          fi
        fi

    - name: "📋 Publish Security Test Results"
      uses: dorny/test-reporter@v1
      if: always() && inputs.run-security-tests && !github.event.pull_request.head.repo.fork
      with:
        name: "Security Test Results"
        path: "${{ inputs.working-directory }}/security-reports/test-results/**/*.trx"
        reporter: dotnet-trx
        fail-on-error: false
      continue-on-error: true

    - name: "📊 Upload Security Artifacts"
      uses: actions/upload-artifact@v4
      if: always() && inputs.upload-artifacts
      with:
        name: security-analysis-results-${{ github.run_number }}
        path: |
          ${{ inputs.working-directory }}/security-reports/
        retention-days: ${{ inputs.artifact-retention-days }}

    - name: "📊 Security Summary"
      if: always()
      run: |
        echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Dependency scan
        if [ "${{ inputs.run-dependency-scan }}" = "true" ]; then
          if [ "${{ steps.dependency-scan.outputs.result }}" = "clean" ]; then
            echo "| 🔍 **Dependency Scan** | ✅ Clean | No vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 **Dependency Scan** | ⚠️ Issues | ${{ steps.dependency-scan.outputs.count }} vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 🔍 **Dependency Scan** | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Code analysis
        if [ "${{ inputs.run-code-analysis }}" = "true" ]; then
          if [ "${{ steps.code-analysis.outputs.result }}" = "clean" ]; then
            echo "| 📋 **Code Analysis** | ✅ Clean | No security warnings |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📋 **Code Analysis** | ⚠️ Warnings | Security warnings found |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 📋 **Code Analysis** | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security tests
        if [ "${{ inputs.run-security-tests }}" = "true" ]; then
          if [ "${{ steps.security-tests.outputs.result }}" = "passed" ]; then
            echo "| 🧪 **Security Tests** | ✅ Passed | ${{ steps.security-tests.outputs.tests-passed }}/${{ steps.security-tests.outputs.tests-total }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 **Security Tests** | ❌ Failed | ${{ steps.security-tests.outputs.tests-failed }} failed |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| 🧪 **Security Tests** | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall result
        if [ "${{ steps.overall-result.outputs.security-result }}" = "success" ]; then
          echo "🎉 **Overall Status: ✅ SECURITY ANALYSIS PASSED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Overall Status: ⚠️ SECURITY ISSUES FOUND**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Issues detected:** ${{ steps.overall-result.outputs.security-result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Security Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Vulnerability scan results available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Static analysis reports available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Security test results available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Filter used: \`${{ inputs.security-test-filter }}\`" >> $GITHUB_STEP_SUMMARY