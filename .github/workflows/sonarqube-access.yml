name: "üîç SonarQube Access - NGROK Tunnel"

on:
  workflow_dispatch:
    inputs:
      access_duration:
        description: 'How long to keep SonarQube accessible (minutes)'
        required: false
        default: '15'
        type: choice
        options:
          - '10'
          - '15'
          - '30'
          - '60'
      run_analysis:
        description: 'Run fresh analysis before opening access'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: '1'
  SOLUTION_FILE: 'Migrated/CreditTransfer.Modern.sln'
  SONAR_PROJECT_KEY: 'credit-transfer-modern'
  SONAR_PROJECT_NAME: "Credit Transfer Modern"

jobs:
  sonarqube-access:
    name: "üîç SonarQube NGROK Access"
    runs-on: ubuntu-latest
    timeout-minutes: 90

    services:
      sonarqube:
        image: sonarqube:10.6-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd="curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üîß Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "‚è≥ Wait for SonarQube to Start"
      run: |
        echo "‚è≥ Waiting for SonarQube to be ready..."
        for i in {1..60}; do
          if curl -s -f http://localhost:9000/api/system/status | grep -q "UP"; then
            echo "‚úÖ SonarQube is ready!"
            break
          fi
          echo "‚è≥ Still starting up... (${i}/60)"
          sleep 5
        done

    - name: "üîê Configure SonarQube Authentication"
      run: |
        echo "üîê Configuring SonarQube authentication..."
        
        # Wait a bit more for SonarQube to be fully ready
        sleep 10
        
        # Change admin password from default 'admin' to 'admin123' to avoid forced password change
        echo "üîë Setting permanent admin password..."
        curl -s -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
          -d "login=admin" \
          -d "password=admin123" \
          -d "previousPassword=admin" || echo "Password already changed or failed to change"
        
        # Verify the new password works
        sleep 2
        if curl -s -u admin:admin123 "http://localhost:9000/api/system/status" | grep -q "UP"; then
          echo "‚úÖ New password verified successfully"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin123" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è New password not working, using default"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin" >> $GITHUB_ENV
        fi

    - name: "üåê Setup NGROK Tunnel"
      run: |
        echo "üåê Setting up NGROK tunnel to expose SonarQube..."
        
        # Install NGROK
        echo "üì¶ Installing NGROK..."
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        
        # Configure NGROK with auth token if available
        if [ -n "${{ secrets.NGROK_AUTH_TOKEN }}" ]; then
          echo "üîë Configuring NGROK with auth token..."
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        else
          echo "‚ö†Ô∏è No NGROK auth token provided - using free tier with session limits"
        fi
        
        # Start NGROK tunnel in background
        echo "üöÄ Starting NGROK tunnel..."
        ngrok http 9000 --log=stdout > /tmp/ngrok.log &
        NGROK_PID=$!
        echo "NGROK_PID=$NGROK_PID" >> $GITHUB_ENV
        
        # Wait for NGROK to start and get the public URL
        echo "‚è≥ Waiting for NGROK tunnel to establish..."
        sleep 10
        
        # Get the public URL from NGROK API
        for i in {1..30}; do
          PUBLIC_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' 2>/dev/null || echo "null")
          if [ "$PUBLIC_URL" != "null" ] && [ "$PUBLIC_URL" != "" ]; then
            echo "‚úÖ NGROK tunnel established!"
            echo "üåê Public URL: $PUBLIC_URL"
            echo "SONAR_HOST_URL=$PUBLIC_URL" >> $GITHUB_ENV
            break
          fi
          echo "‚è≥ Still waiting for tunnel... (${i}/30)"
          sleep 2
        done
        
        if [ "$PUBLIC_URL" = "null" ] || [ "$PUBLIC_URL" = "" ]; then
          echo "‚ùå Failed to establish NGROK tunnel"
          echo "NGROK logs:"
          cat /tmp/ngrok.log || echo "No NGROK logs available"
          exit 1
        fi

    - name: "üîç Run Fresh Analysis"
      if: ${{ inputs.run_analysis }}
      run: |
        echo "üîç Running fresh SonarQube analysis..."
        
        # Install scanner
        echo "üì¶ Installing SonarScanner..."
        dotnet tool install --global dotnet-sonarscanner || echo "Scanner already installed"
        
        # Change to solution directory
        echo "üìÇ Changing to solution directory..."
        cd Migrated || {
          echo "‚ùå Error: Migrated directory not found"
          ls -la
          exit 1
        }
        
        # Get version
        echo "üè∑Ô∏è Getting version information..."
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "manual-$(date +%Y%m%d)")
        echo "Version: $VERSION"
        
        # Begin analysis
        echo "üöÄ Starting SonarQube analysis..."
        dotnet sonarscanner begin \
          /k:"$SONAR_PROJECT_KEY" \
          /n:"$SONAR_PROJECT_NAME" \
          /v:"$VERSION" \
          /d:sonar.host.url="$SONAR_HOST_URL" \
          /d:sonar.login="$SONAR_LOGIN" \
          /d:sonar.password="$SONAR_PASSWORD"
        
        # Build solution
        echo "üî® Building solution..."
        dotnet build "$SOLUTION_FILE" \
          --configuration Release \
          --verbosity minimal
        
        # End analysis
        echo "üìä Completing SonarQube analysis..."
        dotnet sonarscanner end /d:sonar.login="$SONAR_LOGIN" /d:sonar.password="$SONAR_PASSWORD"
        
        cd ..
        echo "‚úÖ Analysis completed!"

    - name: "üìä Display Access Information"
      run: |
        echo "üìä SonarQube is now publicly accessible!"
        
        # Save access info to summary
        echo "## üéâ SonarQube Access Ready!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Public Access via NGROK" >> $GITHUB_STEP_SUMMARY
        echo "**Public URL**: [$SONAR_HOST_URL]($SONAR_HOST_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- **Username**: admin" >> $GITHUB_STEP_SUMMARY
        echo "- **Password**: admin123" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: $SONAR_PROJECT_KEY" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìã Project Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Project Key**: \`$SONAR_PROJECT_KEY\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Project Name**: \`$SONAR_PROJECT_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Analysis Status**: ${{ inputs.run_analysis && 'Fresh analysis completed' || 'No analysis run' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### ‚è∞ Session Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ inputs.access_duration }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Started**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Access Method**: Public NGROK tunnel" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [SonarQube Dashboard]($SONAR_HOST_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- [Project Overview]($SONAR_HOST_URL/dashboard?id=$SONAR_PROJECT_KEY)" >> $GITHUB_STEP_SUMMARY
        echo "- [Issues]($SONAR_HOST_URL/project/issues?id=$SONAR_PROJECT_KEY)" >> $GITHUB_STEP_SUMMARY
        echo "- [Code Coverage]($SONAR_HOST_URL/component_measures?id=$SONAR_PROJECT_KEY&metric=coverage)" >> $GITHUB_STEP_SUMMARY

    - name: "‚è≥ Keep Session Active"
      run: |
        DURATION_SECONDS=$(($((${{ inputs.access_duration }})) * 60))
        echo "‚è≥ Keeping SonarQube accessible for ${{ inputs.access_duration }} minutes..."
        echo "üîó Public URL: $SONAR_HOST_URL"
        echo "üîë Login: admin / admin123"
        echo "üìä Project: $SONAR_PROJECT_KEY"
        echo ""
        
        # Enhanced countdown with status checks
        for ((i=DURATION_SECONDS; i>0; i--)); do
          # Every 5 minutes, show status
          if [ $((i % 300)) -eq 0 ]; then
            MINUTES=$((i / 60))
            echo "‚è∞ $MINUTES minutes remaining..."
            echo "üìä SonarQube Status Check:"
            STATUS=$(curl -s -u admin:admin123 "$SONAR_HOST_URL/api/system/status" | jq -r '.status' 2>/dev/null || echo "UNAVAILABLE")
            echo "   System Status: $STATUS"
            echo "   Public URL: $SONAR_HOST_URL"
            echo ""
          fi
          
          # Every minute show countdown
          if [ $((i % 60)) -eq 0 ] && [ $((i % 300)) -ne 0 ]; then
            MINUTES=$((i / 60))
            echo "‚è∞ $MINUTES minutes remaining..."
          fi
          
          sleep 1
        done
        
        echo "üõë Session expired. SonarQube access ended."

    - name: "üßπ Cleanup"
      if: always()
      run: |
        echo "üßπ Cleaning up NGROK tunnel..."
        if [ -n "$NGROK_PID" ]; then
          kill $NGROK_PID || echo "NGROK process already terminated"
        fi
        pkill ngrok || echo "No NGROK processes found"
        echo "‚úÖ Cleanup completed"

    - name: "üìã Final Summary"
      if: always()
      run: |
        echo "## üìã Session Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ inputs.access_duration }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Analysis**: ${{ inputs.run_analysis && 'Fresh analysis performed' || 'Used existing analysis' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Access Method**: Public NGROK tunnel" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Session completed at $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- **Repeat Access**: Re-run this workflow anytime for another session" >> $GITHUB_STEP_SUMMARY
        echo "- **Local Setup**: Install SonarQube locally for persistent access" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration**: Configure your CI/CD pipeline with SonarQube analysis" >> $GITHUB_STEP_SUMMARY 