name: "üîç SonarQube Access - Manual UI Review"

on:
  workflow_dispatch:
    inputs:
      access_duration:
        description: 'How long to keep SonarQube accessible (minutes)'
        required: false
        default: '15'
        type: choice
        options:
          - '10'
          - '15'
          - '30'
          - '60'
      run_analysis:
        description: 'Run fresh analysis before opening access'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: '1'
  SOLUTION_FILE: 'Migrated/CreditTransfer.Modern.sln'
  SONAR_HOST_URL: 'http://localhost:9000'
  SONAR_PROJECT_KEY: 'credit-transfer-modern'
  SONAR_PROJECT_NAME: "Credit Transfer Modern"

jobs:
  sonarqube-access:
    name: "üîç SonarQube UI Access"
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    services:
      sonarqube:
        image: sonarqube:lts-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
          SONAR_JDBC_URL: jdbc:h2:mem:sonarqube
          SONAR_WEB_JAVAADDITIONALOPTS: -Xmx512m
          SONAR_CE_JAVAADDITIONALOPTS: -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval 45s
          --health-timeout 30s
          --health-retries 15
          --health-start-period 120s
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üîß Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "‚è≥ Wait for SonarQube to Start"
      run: |
        echo "‚è≥ Waiting for SonarQube to be ready (this may take 3-5 minutes)..."
        echo "üìä SonarQube startup typically requires significant memory and time"
        
        # First, let's check if the container is running
        sleep 30
        echo "üîç Checking container status..."
        docker ps | grep sonarqube || echo "No SonarQube container found yet"
        
        # Check logs for any immediate errors
        echo "üìã Recent SonarQube logs:"
        docker logs $(docker ps -q --filter ancestor=sonarqube:lts-community) --tail 10 || echo "Could not fetch logs yet"
        
        # Wait with more patience and better feedback
        for i in {1..120}; do
          if curl -s -f http://localhost:9000/api/system/status | grep -q "UP"; then
            echo "‚úÖ SonarQube is ready!"
            echo "üìä Final status check:"
            curl -s http://localhost:9000/api/system/status || echo "Status check failed"
            break
          fi
          
          # Every 30 seconds, show progress and logs
          if [ $((i % 30)) -eq 0 ]; then
            MINUTES=$((i / 60))
            echo "‚è≥ Still starting up... (${i}/120 - ${MINUTES} minutes elapsed)"
            echo "üîç Container status:"
            docker ps | grep sonarqube || echo "Container not found"
            echo "üìã Latest logs:"
            docker logs $(docker ps -q --filter ancestor=sonarqube:lts-community) --tail 5 2>/dev/null || echo "Could not fetch logs"
            echo "üíæ Memory usage:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep sonarqube || echo "Stats not available"
          fi
          
          sleep 5
        done
        
        # Final check
        if ! curl -s -f http://localhost:9000/api/system/status | grep -q "UP"; then
          echo "‚ùå SonarQube failed to start within 10 minutes"
          echo "üìã Full container logs:"
          docker logs $(docker ps -q --filter ancestor=sonarqube:lts-community) || echo "Could not fetch logs"
          echo "üîç Final container status:"
          docker ps -a | grep sonarqube || echo "No container found"
          exit 1
        fi

    - name: "üîê Configure SonarQube Authentication"
      run: |
        echo "üîê Configuring SonarQube authentication..."
        
        # Wait a bit more for SonarQube to be fully ready
        sleep 10
        
        # Change admin password from default 'admin' to 'admin123' to avoid forced password change
        echo "üîë Setting permanent admin password..."
        curl -s -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
          -d "login=admin" \
          -d "password=admin123" \
          -d "previousPassword=admin" || echo "Password already changed or failed to change"
        
        # Verify the new password works
        sleep 2
        if curl -s -u admin:admin123 "http://localhost:9000/api/system/status" | grep -q "UP"; then
          echo "‚úÖ New password verified successfully"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin123" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è New password not working, using default"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin" >> $GITHUB_ENV
        fi

    - name: "üîç Run Fresh Analysis"
      if: ${{ inputs.run_analysis }}
      run: |
        echo "üîç Running fresh SonarQube analysis..."
        
        # Install scanner
        dotnet tool install --global dotnet-sonarscanner || echo "Scanner already installed"
        
        # Create project if not exists
        PROJECT_CHECK=$(curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD "http://localhost:9000/api/projects/search?projects=$SONAR_PROJECT_KEY" | grep -o '"total":[0-9]*' | cut -d':' -f2 || echo "0")
        if [ "$PROJECT_CHECK" = "0" ]; then
          echo "üìã Creating SonarQube project..."
          curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD -X POST "http://localhost:9000/api/projects/create" \
            -d "name=$SONAR_PROJECT_NAME" \
            -d "project=$SONAR_PROJECT_KEY" || echo "Project creation attempted"
        fi
        
        # Run analysis
        cd Migrated
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "manual-$(date +%Y%m%d)")
        
        dotnet sonarscanner begin \
          /k:"$SONAR_PROJECT_KEY" \
          /n:"$SONAR_PROJECT_NAME" \
          /v:"$VERSION" \
          /d:sonar.host.url="$SONAR_HOST_URL" \
          /d:sonar.login=$SONAR_LOGIN \
          /d:sonar.password=$SONAR_PASSWORD
        
        dotnet build CreditTransfer.Modern.sln --configuration Release --verbosity minimal
        
        dotnet sonarscanner end /d:sonar.login=$SONAR_LOGIN /d:sonar.password=$SONAR_PASSWORD
        
        cd ..
        echo "‚úÖ Analysis completed!"

    - name: "üåê Setup ngrok and Create Public Access"
      run: |
        echo "üåê Setting up public access to SonarQube..."
        
        # Install ngrok
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        
        # Authenticate ngrok (using repository secret)
        if [ -n "${{ secrets.NGROK_AUTH_TOKEN }}" ]; then
          echo "üîë Authenticating ngrok with provided token..."
          ngrok config add-authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
          
          # Start ngrok tunnel
          echo "üöÄ Creating authenticated public tunnel..."
          ngrok http 9000 --log=stdout > ngrok.log 2>&1 &
          NGROK_PID=$!
          
          # Wait for ngrok to initialize
          sleep 15
          
          # Get public URL
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*"' | grep https | cut -d'"' -f4)
          
          if [ -n "$NGROK_URL" ]; then
            echo "üéâ SUCCESS! SonarQube is now publicly accessible!"
            echo ""
            echo "üîó **Access URL**: $NGROK_URL"
            echo "üîë **Login**: admin / admin123"
            echo "üìä **Project**: credit-transfer-modern"
            echo "‚è∞ **Available for**: ${{ inputs.access_duration }} minutes"
            echo ""
            echo "üìä **Quick Links**:"
            echo "   Dashboard: $NGROK_URL/dashboard?id=credit-transfer-modern"
            echo "   Issues: $NGROK_URL/project/issues?id=credit-transfer-modern"
            echo "   Code: $NGROK_URL/code?id=credit-transfer-modern"
            echo ""
            
            # Save access info to summary
            echo "## üéâ SonarQube UI Access Ready!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó Access Information" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: [$NGROK_URL]($NGROK_URL)" >> $GITHUB_STEP_SUMMARY
            echo "- **Login**: admin / admin123" >> $GITHUB_STEP_SUMMARY
            echo "- **Project**: credit-transfer-modern" >> $GITHUB_STEP_SUMMARY
            echo "- **Available for**: ${{ inputs.access_duration }} minutes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìä Quick Links" >> $GITHUB_STEP_SUMMARY
            echo "- [Dashboard]($NGROK_URL/dashboard?id=credit-transfer-modern)" >> $GITHUB_STEP_SUMMARY
            echo "- [Issues]($NGROK_URL/project/issues?id=credit-transfer-modern)" >> $GITHUB_STEP_SUMMARY
            echo "- [Code Analysis]($NGROK_URL/code?id=credit-transfer-modern)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚è∞ **This access will automatically close in ${{ inputs.access_duration }} minutes.**" >> $GITHUB_STEP_SUMMARY
            
            # Keep alive for specified duration
            DURATION_SECONDS=$(($((${{ inputs.access_duration }})) * 60))
            echo "‚è≥ Keeping SonarQube accessible for ${{ inputs.access_duration }} minutes..."
            echo "üåê You can now access SonarQube at: $NGROK_URL"
            
            # Show countdown
            for ((i=DURATION_SECONDS; i>0; i--)); do
              if [ $((i % 60)) -eq 0 ]; then
                MINUTES=$((i / 60))
                echo "‚è∞ $MINUTES minutes remaining..."
              fi
              sleep 1
            done
            
            echo "üõë Access period expired. Closing tunnel..."
            kill $NGROK_PID 2>/dev/null || true
          else
            echo "‚ùå Failed to create ngrok tunnel"
            echo "üîç Checking ngrok logs..."
            cat ngrok.log || echo "No ngrok logs available"
            echo "üí° Please check your NGROK_AUTH_TOKEN secret"
          fi
        else
          echo "‚ö†Ô∏è NGROK_AUTH_TOKEN not configured - using alternative method"
          echo ""
          echo "## üîß Alternative: Local Access Setup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Since ngrok authentication is not configured, here's how to access SonarQube:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Method 1: GitHub Codespaces (Recommended)" >> $GITHUB_STEP_SUMMARY
          echo "1. **Open this repository in GitHub Codespaces**" >> $GITHUB_STEP_SUMMARY
          echo "2. **Run the following commands in Codespaces terminal**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Start SonarQube" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name sonarqube -p 9000:9000 sonarqube:lts-community" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Wait 2-3 minutes, then run your analysis" >> $GITHUB_STEP_SUMMARY
          echo "cd Migrated" >> $GITHUB_STEP_SUMMARY
          echo "dotnet tool install --global dotnet-sonarscanner" >> $GITHUB_STEP_SUMMARY
          echo "dotnet sonarscanner begin /k:\"credit-transfer-modern\" /d:sonar.host.url=\"http://localhost:9000\" /d:sonar.login=admin /d:sonar.password=admin123" >> $GITHUB_STEP_SUMMARY
          echo "dotnet build CreditTransfer.Modern.sln --configuration Release" >> $GITHUB_STEP_SUMMARY
          echo "dotnet sonarscanner end /d:sonar.login=admin /d:sonar.password=admin123" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "3. **Access SonarQube UI**: Codespaces will automatically forward port 9000" >> $GITHUB_STEP_SUMMARY
          echo "4. **Login**: admin / admin123" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Method 2: Configure ngrok Authentication" >> $GITHUB_STEP_SUMMARY
          echo "1. **Add your ngrok auth token to repository secrets**:" >> $GITHUB_STEP_SUMMARY
          echo "   - Go to **Repository Settings** ‚Üí **Secrets and variables** ‚Üí **Actions**" >> $GITHUB_STEP_SUMMARY
          echo "   - Add secret: \`NGROK_AUTH_TOKEN\` = \`30rvnEsJweNjOYvv3nOb6UGd0Tw_6uXQci89ECdPjSW6jVoEH\`" >> $GITHUB_STEP_SUMMARY
          echo "2. **Re-run this workflow** to get a public tunnel" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Method 3: Local Docker Setup" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name sonarqube -p 9000:9000 sonarqube:lts-community" >> $GITHUB_STEP_SUMMARY
          echo "# Wait 2-3 minutes, then access http://localhost:9000" >> $GITHUB_STEP_SUMMARY
          echo "# Login: admin/admin123, then run analysis as shown above" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Keep SonarQube running for the specified duration anyway
          DURATION_SECONDS=$(($((${{ inputs.access_duration }})) * 60))
          echo "‚è≥ Keeping SonarQube container running for ${{ inputs.access_duration }} minutes for local access..."
          echo "üè† SonarQube is available locally at: http://localhost:9000 (from within this runner)"
          
          # Show countdown
          for ((i=DURATION_SECONDS; i>0; i--)); do
            if [ $((i % 60)) -eq 0 ]; then
              MINUTES=$((i / 60))
              echo "‚è∞ $MINUTES minutes remaining (container will stop after this)"
            fi
            sleep 1
          done
          
          echo "üõë Session completed."
        fi

    - name: "üìã Final Summary"
      if: always()
      run: |
        echo "## üìã Session Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ inputs.access_duration }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Analysis**: ${{ inputs.run_analysis && 'Fresh analysis performed' || 'Used existing analysis' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Session completed at $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üí° **To access SonarQube again**: Re-run this workflow or set up locally using \`setup-sonarqube-local.sh\`" >> $GITHUB_STEP_SUMMARY 