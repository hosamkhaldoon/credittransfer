name: "�� SonarQube Access - GitHub Codespaces"

on:
  workflow_dispatch:
    inputs:
      access_duration:
        description: 'How long to keep SonarQube accessible (minutes)'
        required: false
        default: '15'
        type: choice
        options:
          - '10'
          - '15'
          - '30'
          - '60'
      run_analysis:
        description: 'Run fresh analysis before opening access'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: '1'
  SOLUTION_FILE: 'Migrated/CreditTransfer.Modern.sln'
  SONAR_HOST_URL: 'https://studious-chainsaw-5g9w67rg9xp52rp5-9000.app.github.dev'
  SONAR_PROJECT_KEY: 'credit-transfer-modern'
  SONAR_PROJECT_NAME: "Credit Transfer Modern"
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonarqube-access:
    name: "🔍 SonarQube UI Access"
    runs-on: ubuntu-latest
    timeout-minutes: 90
    

    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🔧 Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "⏳ Wait for SonarQube to Start"
      run: |
        echo "⏳ Waiting for SonarQube to be ready..."
        for i in {1..60}; do
          if curl -s -f http://localhost:9000/api/system/status | grep -q "UP"; then
            echo "✅ SonarQube is ready!"
            break
          fi
          echo "⏳ Still starting up... (${i}/60)"
          sleep 5
        done

    - name: "🔐 Configure SonarQube Authentication"
      run: |
        echo "🔐 Configuring SonarQube authentication..."
        
        # Wait a bit more for SonarQube to be fully ready
        sleep 10
        
        # Change admin password from default 'admin' to 'admin123' to avoid forced password change
        echo "🔑 Setting permanent admin password..."
        curl -s -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
          -d "login=admin" \
          -d "password=admin123" \
          -d "previousPassword=admin" || echo "Password already changed or failed to change"
        
        # Verify the new password works
        sleep 2
        if curl -s -u admin:admin123 "http://localhost:9000/api/system/status" | grep -q "UP"; then
          echo "✅ New password verified successfully"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin123" >> $GITHUB_ENV
        else
          echo "⚠️ New password not working, using default"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin" >> $GITHUB_ENV
        fi

    - name: "🔍 Run Fresh Analysis"
      if: ${{ inputs.run_analysis }}
      run: |
        echo "🔍 Running fresh SonarQube analysis..."
        
        # Install scanner
        dotnet tool install --global dotnet-sonarscanner || echo "Scanner already installed"
        
        # Run analysis
        cd Migrated
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "manual-$(date +%Y%m%d)")
        
        dotnet sonarscanner begin \
          /k:"$SONAR_PROJECT_KEY" \
          /n:"$SONAR_PROJECT_NAME" \
          /v:"$VERSION" \
          /d:sonar.host.url="$SONAR_HOST_URL" \
          /d:sonar.token="$SONAR_TOKEN"
        
        dotnet build CreditTransfer.Modern.sln --configuration Release --verbosity minimal
        
        dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"
        
        cd ..
        echo "✅ Analysis completed!"

    - name: "🌐 Setup GitHub Codespaces Access"
      run: |
        echo "🌐 Setting up GitHub Codespaces access to SonarQube..."
        
        # Create a unique session identifier
        SESSION_ID="sonarqube-$(date +%Y%m%d-%H%M%S)"
        echo "🎯 Session ID: $SESSION_ID"
        
        # Check SonarQube is accessible
        if curl -s -f "$SONAR_HOST_URL/api/system/status" > /dev/null; then
          echo "✅ SonarQube is accessible on GitHub Codespaces"
          
          # Save access info to summary
          echo "## 🎉 SonarQube Access Ready!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Access Information" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: $SONAR_HOST_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: $SONAR_PROJECT_KEY" >> $GITHUB_STEP_SUMMARY
          echo "- **Token**: Using configured SONAR_TOKEN" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quick status check
          echo "### 📊 Current Status" >> $GITHUB_STEP_SUMMARY
          STATUS=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" "$SONAR_HOST_URL/api/system/status" | jq -r '.status' || echo "UNAVAILABLE")
          echo "- **System Status**: $STATUS" >> $GITHUB_STEP_SUMMARY
          
          # Project status
          PROJECT_STATUS=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY" | jq -r '.projectStatus.status' || echo "UNKNOWN")
          echo "- **Quality Gate**: $PROJECT_STATUS" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Analysis Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Run analysis" >> $GITHUB_STEP_SUMMARY
          echo "cd Migrated" >> $GITHUB_STEP_SUMMARY
          echo "dotnet tool install --global dotnet-sonarscanner" >> $GITHUB_STEP_SUMMARY
          echo "dotnet sonarscanner begin /k:\"$SONAR_PROJECT_KEY\" /d:sonar.host.url=\"$SONAR_HOST_URL\" /d:sonar.token=\"$SONAR_TOKEN\"" >> $GITHUB_STEP_SUMMARY
          echo "dotnet build CreditTransfer.Modern.sln --configuration Release" >> $GITHUB_STEP_SUMMARY
          echo "dotnet sonarscanner end /d:sonar.token=\"$SONAR_TOKEN\"" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "❌ SonarQube is not accessible at $SONAR_HOST_URL"
          echo "⚠️ Please check your GitHub Codespaces URL and ensure SonarQube is running"
        fi

    - name: "📋 Final Summary"
      if: always()
      run: |
        echo "## 📋 Session Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ inputs.access_duration }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Analysis**: ${{ inputs.run_analysis && 'Fresh analysis performed' || 'Used existing analysis' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Access Method**: GitHub-native (no external services)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Session completed at $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- **Best Option**: Use **GitHub Codespaces** for persistent SonarQube access" >> $GITHUB_STEP_SUMMARY
        echo "- **Alternative**: Run SonarQube locally using the Docker commands above" >> $GITHUB_STEP_SUMMARY
        echo "- **Repeat Access**: Re-run this workflow anytime for another session" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Pro Tip**: GitHub Codespaces provides the best experience with automatic port forwarding and persistent environment!" 