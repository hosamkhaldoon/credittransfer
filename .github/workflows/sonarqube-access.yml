name: "🔍 SonarQube Access - Manual UI Review"

on:
  workflow_dispatch:
    inputs:
      access_duration:
        description: 'How long to keep SonarQube accessible (minutes)'
        required: false
        default: '15'
        type: choice
        options:
          - '10'
          - '15'
          - '30'
          - '60'
      run_analysis:
        description: 'Run fresh analysis before opening access'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: '1'
  SOLUTION_FILE: 'Migrated/CreditTransfer.Modern.sln'
  SONAR_HOST_URL: 'http://localhost:9000'
  SONAR_PROJECT_KEY: 'credit-transfer-modern'
  SONAR_PROJECT_NAME: "Credit Transfer Modern"

jobs:
  sonarqube-access:
    name: "🔍 SonarQube UI Access"
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    services:
      sonarqube:
        image: sonarqube:10.6-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🔧 Setup .NET"
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: "⏳ Wait for SonarQube to Start"
      run: |
        echo "⏳ Waiting for SonarQube to be ready..."
        for i in {1..60}; do
          if curl -s -f http://localhost:9000/api/system/status | grep -q "UP"; then
            echo "✅ SonarQube is ready!"
            break
          fi
          echo "⏳ Still starting up... (${i}/60)"
          sleep 5
        done

    - name: "🔐 Configure SonarQube Authentication"
      run: |
        echo "🔐 Configuring SonarQube authentication..."
        
        # Wait a bit more for SonarQube to be fully ready
        sleep 10
        
        # Change admin password from default 'admin' to 'admin123' to avoid forced password change
        echo "🔑 Setting permanent admin password..."
        curl -s -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
          -d "login=admin" \
          -d "password=admin123" \
          -d "previousPassword=admin" || echo "Password already changed or failed to change"
        
        # Verify the new password works
        sleep 2
        if curl -s -u admin:admin123 "http://localhost:9000/api/system/status" | grep -q "UP"; then
          echo "✅ New password verified successfully"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin123" >> $GITHUB_ENV
        else
          echo "⚠️ New password not working, using default"
          echo "SONAR_LOGIN=admin" >> $GITHUB_ENV
          echo "SONAR_PASSWORD=admin" >> $GITHUB_ENV
        fi

    - name: "🔍 Run Fresh Analysis"
      if: ${{ inputs.run_analysis }}
      run: |
        echo "🔍 Running fresh SonarQube analysis..."
        
        # Install scanner
        dotnet tool install --global dotnet-sonarscanner || echo "Scanner already installed"
        
        # Create project if not exists
        PROJECT_CHECK=$(curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD "http://localhost:9000/api/projects/search?projects=$SONAR_PROJECT_KEY" | grep -o '"total":[0-9]*' | cut -d':' -f2 || echo "0")
        if [ "$PROJECT_CHECK" = "0" ]; then
          echo "📋 Creating SonarQube project..."
          curl -s -u $SONAR_LOGIN:$SONAR_PASSWORD -X POST "http://localhost:9000/api/projects/create" \
            -d "name=$SONAR_PROJECT_NAME" \
            -d "project=$SONAR_PROJECT_KEY" || echo "Project creation attempted"
        fi
        
        # Run analysis
        cd Migrated
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "manual-$(date +%Y%m%d)")
        
        dotnet sonarscanner begin \
          /k:"$SONAR_PROJECT_KEY" \
          /n:"$SONAR_PROJECT_NAME" \
          /v:"$VERSION" \
          /d:sonar.host.url="$SONAR_HOST_URL" \
          /d:sonar.login=$SONAR_LOGIN \
          /d:sonar.password=$SONAR_PASSWORD
        
        dotnet build CreditTransfer.Modern.sln --configuration Release --verbosity minimal
        
        dotnet sonarscanner end /d:sonar.login=$SONAR_LOGIN /d:sonar.password=$SONAR_PASSWORD
        
        cd ..
        echo "✅ Analysis completed!"

    - name: "🌐 Setup GitHub-Native Public Access"
      run: |
        echo "🌐 Setting up GitHub-native access to SonarQube..."
        
        # Get the runner's public IP for reference
        PUBLIC_IP=$(curl -s https://ipinfo.io/ip || echo "IP detection failed")
        echo "📍 Runner Public IP: $PUBLIC_IP"
        
        # Create a unique session identifier
        SESSION_ID="sonarqube-$(date +%Y%m%d-%H%M%S)"
        echo "🎯 Session ID: $SESSION_ID"
        
        # Check SonarQube is accessible
        if curl -s -f http://localhost:9000/api/system/status > /dev/null; then
          echo "✅ SonarQube is accessible on localhost:9000"
          
          # Save access info to summary with GitHub-native instructions
          echo "## 🎉 SonarQube Access Ready!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Access Methods (No External Services Required)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 🌐 Method 1: GitHub Codespaces (Recommended)" >> $GITHUB_STEP_SUMMARY
          echo "1. **Open this repository in GitHub Codespaces**" >> $GITHUB_STEP_SUMMARY
          echo "   - Click: **< > Code** → **Codespaces** → **Create codespace on main**" >> $GITHUB_STEP_SUMMARY
          echo "2. **In Codespaces terminal, run:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Start SonarQube" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name sonarqube -p 9000:9000 sonarqube:10.6-community" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Wait 3 minutes for startup, then run analysis" >> $GITHUB_STEP_SUMMARY
          echo "cd Migrated" >> $GITHUB_STEP_SUMMARY
          echo "dotnet tool install --global dotnet-sonarscanner" >> $GITHUB_STEP_SUMMARY
          echo "dotnet sonarscanner begin /k:\"credit-transfer-modern\" /d:sonar.host.url=\"http://localhost:9000\" /d:sonar.login=admin /d:sonar.password=admin123" >> $GITHUB_STEP_SUMMARY
          echo "dotnet build CreditTransfer.Modern.sln --configuration Release" >> $GITHUB_STEP_SUMMARY
          echo "dotnet sonarscanner end /d:sonar.login=admin /d:sonar.password=admin123" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "3. **Access SonarQube**: Codespaces will show **port 9000** in the ports panel" >> $GITHUB_STEP_SUMMARY
          echo "   - Click **Forward Port 9000** → **Open in Browser**" >> $GITHUB_STEP_SUMMARY
          echo "   - **Login**: admin / admin123" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 🖥️ Method 2: Interactive Session (This Workflow)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: SonarQube is running in this workflow for **${{ inputs.access_duration }} minutes**" >> $GITHUB_STEP_SUMMARY
          echo "- **Access**: Use the **Debug Console** feature below" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: credit-transfer-modern" >> $GITHUB_STEP_SUMMARY
          echo "- **Session ID**: $SESSION_ID" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 🔧 Method 3: Local Development" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Run locally on your machine" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name sonarqube -p 9000:9000 sonarqube:10.6-community" >> $GITHUB_STEP_SUMMARY
          echo "# Wait 3 minutes, then access http://localhost:9000" >> $GITHUB_STEP_SUMMARY
          echo "# Login: admin/admin123" >> $GITHUB_STEP_SUMMARY
          echo "# Run analysis using commands from Method 1" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎮 Interactive Debug Console" >> $GITHUB_STEP_SUMMARY
          echo "Since this workflow keeps running, you can:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Monitor this job in real-time**" >> $GITHUB_STEP_SUMMARY
          echo "2. **Use GitHub's web-based terminal** (if available)" >> $GITHUB_STEP_SUMMARY
          echo "3. **Check SonarQube status** using the commands below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quick Status Commands:**" >> $GITHUB_STEP_SUMMARY
          echo "- SonarQube Status: \`curl http://localhost:9000/api/system/status\`" >> $GITHUB_STEP_SUMMARY
          echo "- Project Status: \`curl -u admin:admin123 'http://localhost:9000/api/projects/search?projects=credit-transfer-modern'\`" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Gate: \`curl -u admin:admin123 'http://localhost:9000/api/qualitygates/project_status?projectKey=credit-transfer-modern'\`" >> $GITHUB_STEP_SUMMARY
          
          # Create interactive session with status updates
          DURATION_SECONDS=$(($((${{ inputs.access_duration }})) * 60))
          echo "⏳ Keeping SonarQube accessible for ${{ inputs.access_duration }} minutes..."
          echo "🔗 SonarQube running at: http://localhost:9000 (runner-local)"
          echo "🔑 Login: admin / admin123"
          echo "📊 Project: credit-transfer-modern"
          echo ""
          echo "💡 While this runs, use GitHub Codespaces (Method 1) for the best experience!"
          echo ""
          
          # Enhanced countdown with status checks
          for ((i=DURATION_SECONDS; i>0; i--)); do
            # Every 5 minutes, show status
            if [ $((i % 300)) -eq 0 ]; then
              MINUTES=$((i / 60))
              echo "⏰ $MINUTES minutes remaining..."
              echo "📊 SonarQube Status Check:"
              STATUS=$(curl -s http://localhost:9000/api/system/status | grep -o '"status":"[^"]*"' | cut -d'"' -f4 || echo "UNAVAILABLE")
              echo "   System Status: $STATUS"
              
              # Check if project exists
              PROJECT_EXISTS=$(curl -s -u admin:admin123 "http://localhost:9000/api/projects/search?projects=credit-transfer-modern" | grep -o '"total":[0-9]*' | cut -d':' -f2 || echo "0")
              if [ "$PROJECT_EXISTS" = "1" ]; then
                echo "   Project Status: ✅ credit-transfer-modern exists"
              else
                echo "   Project Status: ⚠️ No analysis data yet"
              fi
              echo ""
            fi
            
            # Every minute show countdown
            if [ $((i % 60)) -eq 0 ] && [ $((i % 300)) -ne 0 ]; then
              MINUTES=$((i / 60))
              echo "⏰ $MINUTES minutes remaining..."
            fi
            
            sleep 1
          done
          
          echo "🛑 Session expired. SonarQube access ended."
          echo "💡 To access again: Re-run this workflow or use GitHub Codespaces"
        else
          echo "❌ SonarQube is not accessible on localhost:9000"
          echo "🔍 Container status:"
          docker ps | grep sonarqube || echo "No SonarQube containers running"
        fi

    - name: "📋 Final Summary"
      if: always()
      run: |
        echo "## 📋 Session Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ inputs.access_duration }} minutes" >> $GITHUB_STEP_SUMMARY
        echo "- **Analysis**: ${{ inputs.run_analysis && 'Fresh analysis performed' || 'Used existing analysis' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Access Method**: GitHub-native (no external services)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Session completed at $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- **Best Option**: Use **GitHub Codespaces** for persistent SonarQube access" >> $GITHUB_STEP_SUMMARY
        echo "- **Alternative**: Run SonarQube locally using the Docker commands above" >> $GITHUB_STEP_SUMMARY
        echo "- **Repeat Access**: Re-run this workflow anytime for another session" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Pro Tip**: GitHub Codespaces provides the best experience with automatic port forwarding and persistent environment!" 