# Generated by Cursor AI Assistant
name: "🔄 Example: Matrix Service Build"

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (JSON array)'
        required: false
        default: '["api", "wcf", "worker"]'
        type: string
      push-images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'prod'

env:
  REGISTRY: docker.io
  NAMESPACE: credittransfer

jobs:
  # Example of the old way (commented out for comparison)
  # build-wcf-old-way:
  #   name: "🔨 Build WCF Service (Old Way)"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "📥 Checkout Code"
  #       uses: actions/checkout@v4
  #     - name: "🐳 Setup Docker Buildx"  
  #       uses: docker/setup-buildx-action@v3
  #     - name: "🔐 Login to Registry"
  #       if: ${{ inputs.push-images }}
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: "🔨 Build WCF Image"
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./Migrated
  #         file: ./Migrated/src/Services/WebServices/CreditTransferService/Dockerfile
  #         push: ${{ inputs.push-images }}
  #         tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/credittransfer-wcf:latest
  #     # ... would need to repeat for API, Worker, etc. (60+ lines total)

  # NEW WAY: Matrix strategy with shared components
  build-services-matrix:
    name: "🔄 Build Services (Matrix Strategy)"
    uses: ./.github/workflows/shared-service-matrix.yml
    with:
      operation: 'build'
      services: ${{ inputs.services }}
      environment: ${{ inputs.environment }}
      registry: 'docker.io'
      push-images: ${{ inputs.push-images }}
      version-tag: ${{ github.sha }}
      working-directory: './Migrated'
    secrets:
      registry-username: ${{ secrets.DOCKER_USERNAME }}
      registry-password: ${{ secrets.DOCKER_PASSWORD }}

  # Example: Deploy services using the same matrix approach
  deploy-services-matrix:
    name: "🚀 Deploy Services (Matrix Strategy)"
    needs: build-services-matrix
    if: ${{ inputs.push-images && inputs.environment != 'dev' }}
    uses: ./.github/workflows/shared-service-matrix.yml
    with:
      operation: 'deploy'
      services: ${{ inputs.services }}
      environment: ${{ inputs.environment }}
      registry: 'docker.io'
      version-tag: ${{ github.sha }}
    secrets:
      deploy-token: ${{ secrets.DEPLOY_TOKEN }}

  # Example: Health check services after deployment
  health-check-services:
    name: "🏥 Health Check Services"
    needs: deploy-services-matrix
    if: ${{ inputs.environment != 'dev' }}
    uses: ./.github/workflows/shared-service-matrix.yml
    with:
      operation: 'health-check'
      services: ${{ inputs.services }}
      environment: ${{ inputs.environment }}

  # Final summary
  build-summary:
    name: "📊 Build Summary"
    runs-on: ubuntu-latest
    needs: [build-services-matrix, deploy-services-matrix, health-check-services]
    if: always()
    
    steps:
    - name: "📊 Generate Summary"
      run: |
        echo "## 🔄 Matrix Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Services**: ${{ inputs.services }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Push Images**: ${{ inputs.push-images }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🎯 Results" >> $GITHUB_STEP_SUMMARY
        echo "| Operation | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-services-matrix.result }}" = "success" ]; then
          echo "| Build | ✅ Success | All services built successfully |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Build | ❌ Failed | Check build logs for details |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-services-matrix.result }}" = "success" ]; then
          echo "| Deploy | ✅ Success | Services deployed to ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-services-matrix.result }}" = "skipped" ]; then
          echo "| Deploy | ⏭️ Skipped | Push images was false or dev environment |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Deploy | ❌ Failed | Check deployment logs |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.health-check-services.result }}" = "success" ]; then
          echo "| Health Check | ✅ Success | All services are healthy |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.health-check-services.result }}" = "skipped" ]; then
          echo "| Health Check | ⏭️ Skipped | Development environment |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Health Check | ❌ Failed | Some services are unhealthy |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Benefits Demonstrated" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Reduction**: Matrix approach eliminates 60+ lines of duplicate code" >> $GITHUB_STEP_SUMMARY
        echo "- **Maintainability**: Single source of truth for service configurations" >> $GITHUB_STEP_SUMMARY
        echo "- **Scalability**: Easy to add new services by updating JSON configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Reusability**: Same matrix workflow used for build, deploy, and health checks" >> $GITHUB_STEP_SUMMARY
        echo "- **Parallel Execution**: All services processed simultaneously for speed" >> $GITHUB_STEP_SUMMARY