# Generated by Cursor AI Assistant
name: "🧪 Test Modular Architecture"

on:
  workflow_dispatch:
    inputs:
      test_component:
        description: 'Component to test'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'dotnet-setup'
          - 'sonarqube-analysis'
          - 'service-matrix'
          - 'ngrok-access'
      services_to_test:
        description: 'Services to test (JSON array)'
        required: false
        default: '["wcf", "api"]'
        type: string
      test_environment:
        description: 'Test environment'
        required: false
        default: 'dev'
        type: choice
        options: ['dev', 'staging', 'test']
      expose_sonarqube:
        description: 'Create public SonarQube access'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.100'
  TEST_VERSION: 'test-${{ github.run_number }}'

jobs:
  # Test 1: .NET Setup Workflow
  test-dotnet-setup:
    name: "🔧 Test: .NET Setup"
    if: ${{ inputs.test_component == 'all' || inputs.test_component == 'dotnet-setup' }}
    uses: ./.github/workflows/shared-setup-dotnet.yml
    with:
      dotnet-version: '8.0.100'
      working-directory: './Migrated'
      solution-file: 'CreditTransfer.Modern.sln'
      configuration: 'Release'

  # Test 2: Service Matrix - Build Operation
  test-service-matrix-build:
    name: "🔨 Test: Service Matrix (Build)"
    if: ${{ inputs.test_component == 'all' || inputs.test_component == 'service-matrix' }}
    needs: [test-dotnet-setup]
    uses: ./.github/workflows/shared-service-matrix.yml
    with:
      operation: 'build'
      services: ${{ inputs.services_to_test }}
      environment: ${{ inputs.test_environment }}
      registry: 'docker.io'
      push-images: false  # Don't push during testing
      version-tag: 'test-${{ github.run_number }}'
      working-directory: './Migrated'
    secrets:
      registry-username: ${{ secrets.DOCKER_USERNAME }}
      registry-password: ${{ secrets.DOCKER_PASSWORD }}

  # Test 3: SonarQube Analysis
  test-sonarqube:
    name: "🔍 Test: SonarQube Analysis"
    if: ${{ inputs.test_component == 'all' || inputs.test_component == 'sonarqube-analysis' }}
    needs: [test-dotnet-setup]
    uses: ./.github/workflows/shared-sonarqube-analysis.yml
    with:
      project-key: 'credit-transfer-test'
      project-name: "Credit Transfer Test"
      working-directory: './Migrated'
      solution-file: 'CreditTransfer.Modern.sln'
      dotnet-version: '9.0.x'
      skip-build: true  # Solution already built
    secrets:
      sonar-login: admin
      sonar-password: admin123

  # Test 4: Ngrok Public Access
  test-ngrok-access:
    name: "🌐 Test: Public Access"
    runs-on: ubuntu-latest
    if: ${{ (inputs.test_component == 'all' || inputs.test_component == 'ngrok-access') && inputs.expose_sonarqube }}
    needs: [test-sonarqube]
    timeout-minutes: 45
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
    
    - name: "🌐 Create Public SonarQube Access"
      uses: ./.github/actions/setup-ngrok
      with:
        port: 9000
        auth-token: ${{ secrets.NGROK_AUTH_TOKEN }}
        duration-minutes: 15  # Short duration for testing
        service-name: "SonarQube Test"
        service-url-path: "/dashboard?id=credit-transfer-test"

  # Test 5: Service Matrix - Test Operation
  test-service-matrix-test:
    name: "🧪 Test: Service Matrix (Test)"
    if: ${{ inputs.test_component == 'all' || inputs.test_component == 'service-matrix' }}
    needs: [test-service-matrix-build]
    uses: ./.github/workflows/shared-service-matrix.yml
    with:
      operation: 'test'
      services: ${{ inputs.services_to_test }}
      environment: ${{ inputs.test_environment }}
      working-directory: './Migrated'

  # Test 6: Service Matrix - Health Check
  test-service-matrix-health:
    name: "🏥 Test: Service Matrix (Health)"
    if: ${{ inputs.test_component == 'all' || inputs.test_component == 'service-matrix' }}
    needs: [test-service-matrix-test]
    uses: ./.github/workflows/shared-service-matrix.yml
    with:
      operation: 'health-check'
      services: ${{ inputs.services_to_test }}
      environment: ${{ inputs.test_environment }}

  # Summary of all tests
  test-summary:
    name: "📊 Test Summary"
    runs-on: ubuntu-latest
    needs: [test-dotnet-setup, test-service-matrix-build, test-sonarqube, test-ngrok-access, test-service-matrix-test, test-service-matrix-health]
    if: always()
    
    steps:
    - name: "📊 Generate Test Summary"
      run: |
        echo "# 🧪 Modular Architecture Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Component Tested**: ${{ inputs.test_component }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Services**: ${{ inputs.services_to_test }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.test_environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Version**: ${{ env.TEST_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Public Access**: ${{ inputs.expose_sonarqube && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🧪 Component Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        
        # .NET Setup
        if [ "${{ needs.test-dotnet-setup.result }}" = "success" ]; then
          echo "| 🔧 .NET Setup | ✅ Success | Version: ${{ needs.test-dotnet-setup.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-dotnet-setup.result }}" = "skipped" ]; then
          echo "| 🔧 .NET Setup | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔧 .NET Setup | ❌ Failed | Check logs for details |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Service Matrix Build
        if [ "${{ needs.test-service-matrix-build.result }}" = "success" ]; then
          echo "| 🔨 Service Build | ✅ Success | Services: ${{ inputs.services_to_test }} |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-service-matrix-build.result }}" = "skipped" ]; then
          echo "| 🔨 Service Build | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔨 Service Build | ❌ Failed | Check individual service logs |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # SonarQube Analysis
        if [ "${{ needs.test-sonarqube.result }}" = "success" ]; then
          echo "| 🔍 SonarQube | ✅ Success | Analysis completed |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-sonarqube.result }}" = "skipped" ]; then
          echo "| 🔍 SonarQube | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔍 SonarQube | ❌ Failed | Check analysis logs |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Ngrok Access
        if [ "${{ needs.test-ngrok-access.result }}" = "success" ]; then
          echo "| 🌐 Public Access | ✅ Success | Tunnel created successfully |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-ngrok-access.result }}" = "skipped" ]; then
          echo "| 🌐 Public Access | ⏭️ Skipped | Not requested or no token |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🌐 Public Access | ❌ Failed | Check ngrok configuration |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Service Tests
        if [ "${{ needs.test-service-matrix-test.result }}" = "success" ]; then
          echo "| 🧪 Service Tests | ✅ Success | All tests passed |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-service-matrix-test.result }}" = "skipped" ]; then
          echo "| 🧪 Service Tests | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🧪 Service Tests | ❌ Failed | Check test results |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Health Checks
        if [ "${{ needs.test-service-matrix-health.result }}" = "success" ]; then
          echo "| 🏥 Health Checks | ✅ Success | All services healthy |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-service-matrix-health.result }}" = "skipped" ]; then
          echo "| 🏥 Health Checks | ⏭️ Skipped | Not requested |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🏥 Health Checks | ❌ Failed | Check service health |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        FAILED_JOBS=0
        [ "${{ needs.test-dotnet-setup.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
        [ "${{ needs.test-service-matrix-build.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
        [ "${{ needs.test-sonarqube.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
        [ "${{ needs.test-ngrok-access.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
        [ "${{ needs.test-service-matrix-test.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
        [ "${{ needs.test-service-matrix-health.result }}" = "failure" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
        
        if [ $FAILED_JOBS -eq 0 ]; then
          echo "## 🎉 Overall Status: ✅ ALL TESTS PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Modular Architecture Benefits Demonstrated:" >> $GITHUB_STEP_SUMMARY
          echo "- **Reusability**: Shared workflows used across multiple jobs" >> $GITHUB_STEP_SUMMARY
          echo "- **Matrix Strategy**: Multiple services processed in parallel" >> $GITHUB_STEP_SUMMARY
          echo "- **Modularity**: Each component tested independently" >> $GITHUB_STEP_SUMMARY
          echo "- **Scalability**: Easy to add new services and operations" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Overall Status: ❌ $FAILED_JOBS COMPONENTS FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Troubleshooting:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check individual job logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify service configurations in shared-service-matrix.yml" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure all required secrets are configured" >> $GITHUB_STEP_SUMMARY
          echo "4. Check Dockerfile paths and build contexts" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. **Production Use**: Apply modular workflows to main CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
        echo "2. **Customize**: Adapt service configurations to your specific needs" >> $GITHUB_STEP_SUMMARY
        echo "3. **Extend**: Add new operations to service matrix (backup, migrate, etc.)" >> $GITHUB_STEP_SUMMARY
        echo "4. **Scale**: Use across multiple repositories for consistency" >> $GITHUB_STEP_SUMMARY