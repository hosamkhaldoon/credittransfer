# Generated by Cursor AI Assistant
name: "🔍 Shared: SonarQube Analysis"

on:
  workflow_call:
    inputs:
      project-key:
        description: 'SonarQube project key'
        required: true
        type: string
      project-name:
        description: 'SonarQube project name'
        required: true
        type: string
      sonar-host-url:
        description: 'SonarQube host URL'
        required: false
        default: 'http://localhost:9000'
        type: string
      working-directory:
        description: 'Working directory for analysis'
        required: false
        default: './Migrated'
        type: string
      solution-file:
        description: 'Solution file to analyze'
        required: false
        default: 'CreditTransfer.Modern.sln'
        type: string
      dotnet-version:
        description: '.NET version for analysis'
        required: false
        default: '9.0.x'
        type: string
      skip-build:
        description: 'Skip build step (solution already built)'
        required: false
        default: false
        type: boolean
    secrets:
      sonar-token:
        description: 'SonarQube authentication token'
        required: false
      sonar-login:
        description: 'SonarQube login username'
        required: false
      sonar-password:
        description: 'SonarQube login password'
        required: false

jobs:
  sonarqube-analysis:
    name: "🔍 SonarQube Analysis"
    runs-on: ubuntu-latest
    
    services:
      sonarqube:
        image: sonarqube:10.6-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🔧 Setup .NET ${{ inputs.dotnet-version }}"
      if: ${{ !inputs.skip-build }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: "⏳ Wait for SonarQube"
      run: |
        echo "⏳ Waiting for SonarQube to be ready..."
        for i in {1..60}; do
          if curl -s -f ${{ inputs.sonar-host-url }}/api/system/status | grep -q "UP"; then
            echo "✅ SonarQube is ready!"
            break
          fi
          echo "⏳ Still starting up... (${i}/60)"
          sleep 5
        done

    - name: "🔐 Setup Authentication"
      id: auth
      run: |
        # Priority: token > explicit login/password > default admin
        if [ -n "${{ secrets.sonar-token }}" ]; then
          echo "auth-method=token" >> $GITHUB_OUTPUT
          echo "auth-value=${{ secrets.sonar-token }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided SonarQube token"
        elif [ -n "${{ secrets.sonar-login }}" ] && [ -n "${{ secrets.sonar-password }}" ]; then
          echo "auth-method=login" >> $GITHUB_OUTPUT
          echo "login=${{ secrets.sonar-login }}" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.sonar-password }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided login credentials"
        else
          echo "auth-method=default" >> $GITHUB_OUTPUT
          echo "✅ Using default admin credentials"
          
          # Setup default admin password
          sleep 10
          curl -s -u admin:admin -X POST "${{ inputs.sonar-host-url }}/api/users/change_password" \
            -d "login=admin" \
            -d "password=admin123" \
            -d "previousPassword=admin" || echo "Password setup attempted"
          
          echo "login=admin" >> $GITHUB_OUTPUT
          echo "password=admin123" >> $GITHUB_OUTPUT
        fi

    - name: "📋 Setup Project"
      run: |
        echo "📋 Setting up SonarQube project..."
        
        # Determine authentication
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          AUTH_HEADER="Authorization: Bearer ${{ steps.auth.outputs.auth-value }}"
          AUTH_CURL="-H \"$AUTH_HEADER\""
        else
          LOGIN="${{ steps.auth.outputs.login }}"
          PASSWORD="${{ steps.auth.outputs.password }}"
          AUTH_CURL="-u $LOGIN:$PASSWORD"
        fi
        
        # Check if project exists
        PROJECT_EXISTS=$(eval "curl -s $AUTH_CURL \"${{ inputs.sonar-host-url }}/api/projects/search?projects=${{ inputs.project-key }}\"" \
          | grep -o '"total":[0-9]*' | cut -d':' -f2 2>/dev/null || echo "0")
        
        if [ "$PROJECT_EXISTS" = "0" ]; then
          echo "🆕 Creating project '${{ inputs.project-key }}'..."
          eval "curl -s $AUTH_CURL -X POST \"${{ inputs.sonar-host-url }}/api/projects/create\" \
            -d \"name=${{ inputs.project-name }}\" \
            -d \"project=${{ inputs.project-key }}\""
          echo "✅ Project created"
        else
          echo "✅ Project '${{ inputs.project-key }}' already exists"
        fi

    - name: "🔍 Run Analysis"
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Running SonarQube analysis..."
        
        # Install scanner
        dotnet tool install --global dotnet-sonarscanner || echo "Scanner already installed"
        
        # Generate version
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "auto-$(date +%Y%m%d-%H%M%S)")
        
        # Prepare scanner arguments
        SCANNER_ARGS="/k:\"${{ inputs.project-key }}\" /n:\"${{ inputs.project-name }}\" /v:\"$VERSION\" /d:sonar.host.url=\"${{ inputs.sonar-host-url }}\""
        
        # Add authentication
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          SCANNER_ARGS="$SCANNER_ARGS /d:sonar.token=\"${{ steps.auth.outputs.auth-value }}\""
        else
          SCANNER_ARGS="$SCANNER_ARGS /d:sonar.login=\"${{ steps.auth.outputs.login }}\" /d:sonar.password=\"${{ steps.auth.outputs.password }}\""
        fi
        
        # Add analysis configuration
        SCANNER_ARGS="$SCANNER_ARGS \
          /d:sonar.cs.opencover.reportsPaths=\"**/coverage.opencover.xml\" \
          /d:sonar.coverage.exclusions=\"**/*Test*,**/*Tests*,**/TestProject*\" \
          /d:sonar.exclusions=\"**/bin/**/*,**/obj/**/*,**/node_modules/**/*\" \
          /d:sonar.sourceEncoding=UTF-8"
        
        echo "🚀 Starting analysis for version: $VERSION"
        eval "dotnet sonarscanner begin $SCANNER_ARGS"
        
        # Build if not skipped
        if [ "${{ inputs.skip-build }}" != "true" ]; then
          echo "🔨 Building solution for analysis..."
          dotnet build ${{ inputs.solution-file }} --configuration Release --verbosity minimal
        fi
        
        # Complete analysis
        echo "📊 Completing analysis..."
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          dotnet sonarscanner end /d:sonar.token="${{ steps.auth.outputs.auth-value }}"
        else
          dotnet sonarscanner end /d:sonar.login="${{ steps.auth.outputs.login }}" /d:sonar.password="${{ steps.auth.outputs.password }}"
        fi
        
        echo "✅ Analysis completed!"
        echo "🔗 View results at: ${{ inputs.sonar-host-url }}/dashboard?id=${{ inputs.project-key }}"