# Code generated by Cursor
# Generated by Cursor AI Assistant
name: "üîç Shared: SonarQube Analysis"

on:
  workflow_call:
    inputs:
      project-key:
        description: 'SonarQube project key'
        required: true
        type: string
      project-name:
        description: 'SonarQube project name'
        required: true
        type: string
      sonar-host-url:
        description: 'SonarQube host URL'
        required: false
        default: 'http://localhost:9000'
        type: string
      working-directory:
        description: 'Working directory for analysis'
        required: false
        default: './Migrated'
        type: string
      solution-file:
        description: 'Solution file to analyze'
        required: false
        default: '*.sln'
        type: string
      dotnet-version:
        description: '.NET version for analysis'
        required: false
        default: '9.0.x'
        type: string
      skip-build:
        description: 'Skip build step (solution already built)'
        required: false
        default: false
        type: boolean
    secrets:
      sonar-token:
        description: 'SonarQube authentication token'
        required: false
      sonar-login:
        description: 'SonarQube login username'
        required: false
      sonar-password:
        description: 'SonarQube login password'
        required: false

jobs:
  sonarqube-analysis:
    name: "üîç SonarQube Analysis"
    runs-on: ubuntu-latest
    
    services:
      sonarqube:
        image: sonarqube:10.6-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "üîß Setup .NET ${{ inputs.dotnet-version }}"
      if: ${{ !inputs.skip-build }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: "‚è≥ Wait for SonarQube"
      run: |
        echo "‚è≥ Waiting for SonarQube to be ready..."
        echo "üîó Checking SonarQube at: ${{ inputs.sonar-host-url }}"
        
        for i in {1..60}; do
          echo "üîç Attempt $i/60: Testing connection..."
          
          # Test basic connectivity
          if curl -s -f "${{ inputs.sonar-host-url }}/api/system/status" > /tmp/sonar_status.json 2>/dev/null; then
            echo "üìã SonarQube response:"
            cat /tmp/sonar_status.json
            
            if grep -q "UP" /tmp/sonar_status.json; then
              echo "‚úÖ SonarQube is ready!"
              break
            else
              echo "‚ö†Ô∏è SonarQube responded but not in UP status"
            fi
          else
            echo "‚ùå No response from SonarQube (attempt $i/60)"
            # Test if the service is even reachable
            if curl -s --connect-timeout 5 "${{ inputs.sonar-host-url }}" > /dev/null 2>&1; then
              echo "üîó SonarQube port is reachable, but API not ready"
            else
              echo "üíî SonarQube port is not reachable"
            fi
          fi
          
          if [ $i -eq 60 ]; then
            echo "‚ùå SonarQube failed to start within 5 minutes"
            echo "üîç Final status check:"
            curl -v "${{ inputs.sonar-host-url }}/api/system/status" || echo "Final connection failed"
            exit 1
          fi
          
          echo "‚è≥ Waiting 5 seconds before retry..."
          sleep 5
        done

    - name: "üîê Setup Authentication"
      id: auth
      run: |
        echo "üîê Setting up SonarQube authentication..."
        
        # Priority: token > explicit login/password > default admin
        if [ -n "${{ secrets.sonar-token }}" ]; then
          echo "auth-method=token" >> $GITHUB_OUTPUT
          echo "auth-value=${{ secrets.sonar-token }}" >> $GITHUB_OUTPUT
          echo "‚úÖ Using provided SonarQube token"
        elif [ -n "${{ secrets.sonar-login }}" ] && [ -n "${{ secrets.sonar-password }}" ]; then
          echo "auth-method=login" >> $GITHUB_OUTPUT
          echo "login=${{ secrets.sonar-login }}" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.sonar-password }}" >> $GITHUB_OUTPUT
          echo "‚úÖ Using provided login credentials (login: ${{ secrets.sonar-login }})"
          
          # Test the provided credentials
          echo "üß™ Testing provided credentials..."
          if curl -s -u "${{ secrets.sonar-login }}:${{ secrets.sonar-password }}" "${{ inputs.sonar-host-url }}/api/authentication/validate" | grep -q "valid.*true"; then
            echo "‚úÖ Provided credentials are valid"
          else
            echo "‚ö†Ô∏è Warning: Provided credentials may not be valid yet"
          fi
        else
          echo "auth-method=default" >> $GITHUB_OUTPUT
          echo "‚úÖ Using default admin credentials"
          
          # Setup default admin password
          echo "üîß Setting up default admin password..."
          sleep 10
          
          # Check if admin password is already changed
          if curl -s -u admin:admin123 "${{ inputs.sonar-host-url }}/api/authentication/validate" | grep -q "valid.*true"; then
            echo "‚úÖ Admin password already set to admin123"
          else
            echo "üîÑ Changing default admin password..."
            curl -s -u admin:admin -X POST "${{ inputs.sonar-host-url }}/api/users/change_password" \
              -d "login=admin" \
              -d "password=admin123" \
              -d "previousPassword=admin" && echo "‚úÖ Password changed successfully" || echo "‚ö†Ô∏è Password change attempted"
            
            # Wait a moment and test the new password
            sleep 5
            if curl -s -u admin:admin123 "${{ inputs.sonar-host-url }}/api/authentication/validate" | grep -q "valid.*true"; then
              echo "‚úÖ New password is working"
            else
              echo "‚ùå New password validation failed"
            fi
          fi
          
          echo "login=admin" >> $GITHUB_OUTPUT
          echo "password=admin123" >> $GITHUB_OUTPUT
        fi

    - name: "üìã Setup Project"
      run: |
        echo "üìã Setting up SonarQube project..."
        
        # Determine authentication
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          AUTH_HEADER="Authorization: Bearer ${{ steps.auth.outputs.auth-value }}"
          AUTH_CURL="-H \"$AUTH_HEADER\""
        else
          LOGIN="${{ steps.auth.outputs.login }}"
          PASSWORD="${{ steps.auth.outputs.password }}"
          AUTH_CURL="-u $LOGIN:$PASSWORD"
        fi
        
        # Check if project exists
        PROJECT_EXISTS=$(eval "curl -s $AUTH_CURL \"${{ inputs.sonar-host-url }}/api/projects/search?projects=${{ inputs.project-key }}\"" \
          | grep -o '"total":[0-9]*' | cut -d':' -f2 2>/dev/null || echo "0")
        
        if [ "$PROJECT_EXISTS" = "0" ]; then
          echo "üÜï Creating project '${{ inputs.project-key }}'..."
          eval "curl -s $AUTH_CURL -X POST \"${{ inputs.sonar-host-url }}/api/projects/create\" \
            -d \"name=${{ inputs.project-name }}\" \
            -d \"project=${{ inputs.project-key }}\""
          echo "‚úÖ Project created"
        else
          echo "‚úÖ Project '${{ inputs.project-key }}' already exists"
        fi

    - name: "üîç Run Analysis"
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç Running SonarQube analysis..."
        
        # Install scanner
        dotnet tool install --global dotnet-sonarscanner || echo "Scanner already installed"
        
        # Generate version
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "auto-$(date +%Y%m%d-%H%M%S)")
        
        echo "üöÄ Starting analysis for version: $VERSION"
        echo "üîó Host URL being used: ${{ inputs.sonar-host-url }}"
        echo "üîê Authentication method: ${{ steps.auth.outputs.auth-method }}"
        
        # Test connectivity before starting scanner
        echo "üß™ Testing SonarQube connectivity before analysis..."
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          curl -s -H "Authorization: Bearer ${{ steps.auth.outputs.auth-value }}" "${{ inputs.sonar-host-url }}/api/projects/search" > /dev/null && echo "‚úÖ Token authentication works" || echo "‚ö†Ô∏è Token authentication failed"
        else
          curl -s -u "${{ steps.auth.outputs.login }}:${{ steps.auth.outputs.password }}" "${{ inputs.sonar-host-url }}/api/projects/search" > /dev/null && echo "‚úÖ Login authentication works" || echo "‚ö†Ô∏è Login authentication failed"
        fi
        
        # Start analysis with explicit parameters (avoiding complex quoting issues)
        echo "üéØ Starting SonarScanner with parameters:"
        echo "  Project Key: ${{ inputs.project-key }}"
        echo "  Project Name: ${{ inputs.project-name }}"
        echo "  Version: $VERSION"
        echo "  Host URL: ${{ inputs.sonar-host-url }}"
        
        # Use environment variables for SonarScanner (recommended approach)
        export SONAR_HOST_URL="${{ inputs.sonar-host-url }}"
        
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          echo "  Auth: Token (***)"
          export SONAR_TOKEN="${{ steps.auth.outputs.auth-value }}"
          unset SONAR_LOGIN SONAR_PASSWORD
        else
          echo "  Auth: Login (${{ steps.auth.outputs.login }})"
          export SONAR_LOGIN="${{ steps.auth.outputs.login }}"
          export SONAR_PASSWORD="${{ steps.auth.outputs.password }}"
          unset SONAR_TOKEN
        fi
        
        echo "üåç Environment variables set:"
        echo "  SONAR_HOST_URL=$SONAR_HOST_URL"
        echo "  SONAR_LOGIN=${SONAR_LOGIN:-"(not set)"}"
        echo "  SONAR_TOKEN=${SONAR_TOKEN:+***}"
        
        # Start scanner with minimal parameters (let environment variables handle the rest)
        dotnet sonarscanner begin \
          /k:"${{ inputs.project-key }}" \
          /n:"${{ inputs.project-name }}" \
          /v:"$VERSION" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.coverage.exclusions="**/*Test*,**/*Tests*,**/TestProject*" \
          /d:sonar.exclusions="**/bin/**/*,**/obj/**/*,**/node_modules/**/*" \
          /d:sonar.sourceEncoding=UTF-8
        
        # Build if not skipped
        if [ "${{ inputs.skip-build }}" != "true" ]; then
          echo "üî® Building solution for analysis..."
          dotnet build ${{ inputs.solution-file }} --configuration Release --verbosity minimal
        fi
        
        # Complete analysis
        echo "üìä Completing analysis..."
        echo "üåç Using environment variables for authentication..."
        dotnet sonarscanner end
        
        echo "‚úÖ Analysis completed!"
        echo "üîó View results at: ${{ inputs.sonar-host-url }}/dashboard?id=${{ inputs.project-key }}"