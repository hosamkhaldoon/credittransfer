# Code generated by Cursor
# Generated by Cursor AI Assistant
name: "🔍 Shared: SonarQube Analysis"

on:
  workflow_call:
    inputs:
      project-key:
        description: 'SonarQube project key'
        required: true
        type: string
      project-name:
        description: 'SonarQube project name'
        required: true
        type: string
      sonar-host-url:
        description: 'SonarQube host URL'
        required: false
        default: 'http://localhost:9000'
        type: string
      working-directory:
        description: 'Working directory for analysis'
        required: false
        default: './Migrated'
        type: string
      solution-file:
        description: 'Solution file to analyze'
        required: false
        default: '*.sln'
        type: string
      dotnet-version:
        description: '.NET version for analysis'
        required: false
        default: '9.0.x'
        type: string
      skip-build:
        description: 'Skip build step (solution already built)'
        required: false
        default: false
        type: boolean
    secrets:
      sonar-token:
        description: 'SonarQube authentication token'
        required: false
      sonar-login:
        description: 'SonarQube login username'
        required: false
      sonar-password:
        description: 'SonarQube login password'
        required: false

jobs:
  sonarqube-analysis:
    name: "🔍 SonarQube Analysis"
    runs-on: ubuntu-latest
    
    services:
      sonarqube:
        image: sonarqube:10.6-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "🔧 Setup .NET ${{ inputs.dotnet-version }}"
      if: ${{ !inputs.skip-build }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: "⏳ Wait for SonarQube"
      run: |
        echo "⏳ Waiting for SonarQube to be ready..."
        echo "🔗 Checking SonarQube at: ${{ inputs.sonar-host-url }}"
        
        for i in {1..60}; do
          echo "🔍 Attempt $i/60: Testing connection..."
          
          # Test basic connectivity
          if curl -s -f "${{ inputs.sonar-host-url }}/api/system/status" > /tmp/sonar_status.json 2>/dev/null; then
            echo "📋 SonarQube response:"
            cat /tmp/sonar_status.json
            
            if grep -q "UP" /tmp/sonar_status.json; then
              echo "✅ SonarQube is ready!"
              break
            else
              echo "⚠️ SonarQube responded but not in UP status"
            fi
          else
            echo "❌ No response from SonarQube (attempt $i/60)"
            # Test if the service is even reachable
            if curl -s --connect-timeout 5 "${{ inputs.sonar-host-url }}" > /dev/null 2>&1; then
              echo "🔗 SonarQube port is reachable, but API not ready"
            else
              echo "💔 SonarQube port is not reachable"
            fi
          fi
          
          if [ $i -eq 60 ]; then
            echo "❌ SonarQube failed to start within 5 minutes"
            echo "🔍 Final status check:"
            curl -v "${{ inputs.sonar-host-url }}/api/system/status" || echo "Final connection failed"
            exit 1
          fi
          
          echo "⏳ Waiting 5 seconds before retry..."
          sleep 5
        done

    - name: "🔐 Setup Authentication"
      id: auth
      run: |
        echo "🔐 Setting up SonarQube authentication..."
        
        # Priority: token > explicit login/password > default admin
        if [ -n "${{ secrets.sonar-token }}" ]; then
          echo "auth-method=token" >> $GITHUB_OUTPUT
          echo "auth-value=${{ secrets.sonar-token }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided SonarQube token"
        elif [ -n "${{ secrets.sonar-login }}" ] && [ -n "${{ secrets.sonar-password }}" ]; then
          echo "auth-method=login" >> $GITHUB_OUTPUT
          echo "login=${{ secrets.sonar-login }}" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.sonar-password }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided login credentials (login: ${{ secrets.sonar-login }})"
          
          # Test the provided credentials with a more reliable endpoint
          echo "🧪 Testing provided credentials..."
          # Wait a bit more for SonarQube to be fully ready
          sleep 5
          
          # Try multiple endpoints to validate credentials
          if curl -s -u "${{ secrets.sonar-login }}:${{ secrets.sonar-password }}" "${{ inputs.sonar-host-url }}/api/system/status" | grep -q "UP"; then
            echo "✅ Provided credentials work with system status endpoint"
          elif curl -s -u "${{ secrets.sonar-login }}:${{ secrets.sonar-password }}" "${{ inputs.sonar-host-url }}/api/users/current" | grep -q "login"; then
            echo "✅ Provided credentials work with users endpoint"
          elif curl -s -u "${{ secrets.sonar-login }}:${{ secrets.sonar-password }}" "${{ inputs.sonar-host-url }}/api/projects/search" >/dev/null 2>&1; then
            echo "✅ Provided credentials work with projects endpoint"
          else
            echo "⚠️ Warning: Could not validate credentials with available endpoints"
            echo "🔍 This may be normal if SonarQube is still starting up"
          fi
        else
          echo "auth-method=default" >> $GITHUB_OUTPUT
          echo "✅ Using default admin credentials"
          
          # Setup default admin password
          echo "🔧 Setting up default admin password..."
          sleep 15  # Give SonarQube more time to be fully ready
          
          # Check if admin password is already changed
          if curl -s -u admin:admin123 "${{ inputs.sonar-host-url }}/api/system/status" | grep -q "UP"; then
            echo "✅ Admin password already set to admin123"
          else
            echo "🔄 Changing default admin password from admin to admin123..."
            
            # Try the password change
            CHANGE_RESULT=$(curl -s -u admin:admin -X POST "${{ inputs.sonar-host-url }}/api/users/change_password" \
              -d "login=admin" \
              -d "password=admin123" \
              -d "previousPassword=admin" 2>&1 || echo "change_failed")
            
            if [[ "$CHANGE_RESULT" == *"change_failed"* ]]; then
              echo "⚠️ Password change with admin:admin failed, trying with admin123 (may already be changed)"
            else
              echo "✅ Password change command executed"
            fi
            
            # Wait and test the new password with multiple attempts
            sleep 10
            for i in {1..3}; do
              if curl -s -u admin:admin123 "${{ inputs.sonar-host-url }}/api/system/status" | grep -q "UP"; then
                echo "✅ New password admin123 is working (attempt $i)"
                break
              elif [ $i -eq 3 ]; then
                echo "⚠️ Password validation failed after 3 attempts, proceeding anyway"
              else
                echo "🔄 Testing password attempt $i/3..."
                sleep 5
              fi
            done
          fi
          
          echo "login=admin" >> $GITHUB_OUTPUT
          echo "password=admin123" >> $GITHUB_OUTPUT
        fi

    - name: "📋 Setup Project"
      run: |
        echo "📋 Setting up SonarQube project..."
        
        # Determine authentication
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          AUTH_HEADER="Authorization: Bearer ${{ steps.auth.outputs.auth-value }}"
          AUTH_CURL="-H \"$AUTH_HEADER\""
        else
          LOGIN="${{ steps.auth.outputs.login }}"
          PASSWORD="${{ steps.auth.outputs.password }}"
          AUTH_CURL="-u $LOGIN:$PASSWORD"
        fi
        
        # Check if project exists
        PROJECT_EXISTS=$(eval "curl -s $AUTH_CURL \"${{ inputs.sonar-host-url }}/api/projects/search?projects=${{ inputs.project-key }}\"" \
          | grep -o '"total":[0-9]*' | cut -d':' -f2 2>/dev/null || echo "0")
        
        if [ "$PROJECT_EXISTS" = "0" ]; then
          echo "🆕 Creating project '${{ inputs.project-key }}'..."
          eval "curl -s $AUTH_CURL -X POST \"${{ inputs.sonar-host-url }}/api/projects/create\" \
            -d \"name=${{ inputs.project-name }}\" \
            -d \"project=${{ inputs.project-key }}\""
          echo "✅ Project created"
        else
          echo "✅ Project '${{ inputs.project-key }}' already exists"
        fi

    - name: "🔍 Run Analysis"
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Running SonarQube analysis..."
        
        # Install specific version of scanner that works reliably with local SonarQube
        echo "🔧 Installing SonarScanner for .NET..."
        dotnet tool uninstall --global dotnet-sonarscanner || echo "No existing scanner to uninstall"
        dotnet tool install --global dotnet-sonarscanner --version 5.15.0
        
        # Verify installation (5.15.0 doesn't support --version, but that's ok)
        echo "✅ SonarScanner 5.15.0 installed successfully"
        
        # Generate version
        VERSION=$(git rev-parse --short HEAD 2>/dev/null || echo "auto-$(date +%Y%m%d-%H%M%S)")
        
        echo "🚀 Starting analysis for version: $VERSION"
        echo "🔗 Host URL being used: ${{ inputs.sonar-host-url }}"
        echo "🔐 Authentication method: ${{ steps.auth.outputs.auth-method }}"
        
        # Test connectivity before starting scanner
        echo "🧪 Testing SonarQube connectivity before analysis..."
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          curl -s -H "Authorization: Bearer ${{ steps.auth.outputs.auth-value }}" "${{ inputs.sonar-host-url }}/api/projects/search" > /dev/null && echo "✅ Token authentication works" || echo "⚠️ Token authentication failed"
        else
          curl -s -u "${{ steps.auth.outputs.login }}:${{ steps.auth.outputs.password }}" "${{ inputs.sonar-host-url }}/api/projects/search" > /dev/null && echo "✅ Login authentication works" || echo "⚠️ Login authentication failed"
        fi
        
        # Store credentials in shell variables first to avoid GitHub masking
        SONAR_HOST="${{ inputs.sonar-host-url }}"
        SONAR_KEY="${{ inputs.project-key }}"
        SONAR_NAME="${{ inputs.project-name }}"
        
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          SONAR_TOKEN="${{ steps.auth.outputs.auth-value }}"
          echo "📝 Using token authentication for SonarScanner"
        else
          SONAR_USER="${{ steps.auth.outputs.login }}"
          SONAR_PASS="${{ steps.auth.outputs.password }}"
          echo "📝 Using login authentication for SonarScanner"
          echo "🔐 Login: $SONAR_USER"
        fi
        
        # Test authentication one more time before starting scanner
        echo "🔐 Final authentication test before scanner..."
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          AUTH_TEST=$(curl -s -w "%{http_code}" -o /dev/null -H "Authorization: Bearer $SONAR_TOKEN" "$SONAR_HOST/api/system/status")
          echo "Token auth test response: $AUTH_TEST"
        else
          AUTH_TEST=$(curl -s -w "%{http_code}" -o /dev/null -u "$SONAR_USER:$SONAR_PASS" "$SONAR_HOST/api/system/status")
          echo "Login auth test response: $AUTH_TEST"
        fi
        
        # Set up environment variables for SonarScanner (more reliable for 5.15.0)
        export SONAR_HOST_URL="$SONAR_HOST"
        
        # Start analysis with environment variables + minimal parameters
        echo "🎯 Starting SonarScanner with environment variables and minimal parameters..."
        if [ "${{ steps.auth.outputs.auth-method }}" = "token" ]; then
          echo "  Using token authentication via environment variables"
          export SONAR_TOKEN="$SONAR_TOKEN"
          unset SONAR_LOGIN SONAR_PASSWORD
          
          echo "🌍 Environment: SONAR_HOST_URL=$SONAR_HOST_URL, SONAR_TOKEN=***"
          
          dotnet sonarscanner begin \
            /k:"$SONAR_KEY" \
            /n:"$SONAR_NAME" \
            /v:"$VERSION"
        else
          echo "  Using login authentication via environment variables"
          export SONAR_LOGIN="$SONAR_USER"
          export SONAR_PASSWORD="$SONAR_PASS"
          unset SONAR_TOKEN
          
          echo "🌍 Environment: SONAR_HOST_URL=$SONAR_HOST_URL, SONAR_LOGIN=$SONAR_USER"
          
          dotnet sonarscanner begin \
            /k:"$SONAR_KEY" \
            /n:"$SONAR_NAME" \
            /v:"$VERSION"
        fi
        
        # Build if not skipped
        if [ "${{ inputs.skip-build }}" != "true" ]; then
          echo "🔨 Building solution for analysis..."
          dotnet build ${{ inputs.solution-file }} --configuration Release --verbosity minimal
        fi
        
        # Complete analysis
        echo "📊 Completing analysis..."
        echo "🌍 Using environment variables for scanner end command"
        dotnet sonarscanner end
        
        echo "✅ Analysis completed!"
        echo "🔗 View results at: ${{ inputs.sonar-host-url }}/dashboard?id=${{ inputs.project-key }}"